{
  "id": "npm-distribution-path-length-problems",
  "slug": "npm-distribution-path-length-problems",
  "highlightedLanguages": [
    "javascript"
  ],
  "source": "---\ndate: 2015-12-07\nsummary: NW.js is great for creating desktop applications using Web app technologies. If you're not familiar with NW.js, I'd advise you to read an introductory article like Creating Your First Desktop App With HTML, JS and Node-WebKit to get a good base first. This is a slightly more advanced article intended for anyone interested into distributing their NW.js app to Windows users.\noriginal:\n  blogLink: https://www.packtpub.com/books/content/blogs\n  blogName: Packt books\n  url: https://www.packtpub.com/books/content/npm-and-distribution-path-length-problems\ntags:\n  - node-webkit\n  - desktop\n  - javascript\n  - npm\n  - distribution\n  - windows\n  - paths\n---\n\n## npm and distribution path length problems\n\n:::summary\n\nYou might have been unfortunate enough to learn that Windows has a 256 character limit on file paths. You could've ran into this problem locally or on end users' machines. There's no real workaround but there are preventive measures you can take. Even if you haven't, feel free to take pleasure from reading my horror story.\n\n:::\n\n### npm\n\nNeither this problem nor our solution are exclusive to Node.js but a lot of the victims of the path length problem were probably running Node.js on Windows. Windows users know that they get left out in the cold often by npm package maintainers but even [the design of npm itself is a problem on Windows from the get-go](https://github.com/joyent/node/issues/6960#issuecomment-46704998).\n\nnpm stores your dependencies (listed in your package.json) in a `node_modules` directory. If those dependencies have dependencies of their own they're stored in their own `node_modules` directory (i.e. `your-project/node_modules/a/node_modules/b/`) and so on recursively. It's nice but in hindsight it's obviously incompatible with Windows's path length limit.\n\n### Delete delete delete\n\nMost people have probably been lucky enough to only have come across this problem when trying to delete dependencies where then Windows complains that the path is too long.\n\nA simple way around this is to take a module halfway down deep into your dependency graph (i.e. `node_modules/a/node_modules/b/node_modules/c/.../node_modules/h/`) in Windows Explorer and move it somewhere closer to the root (e.g. `node_modules/`) to cut the file path down before trying to delete it again. This would have to be repeated for every culprit.\n\nThere are also some tools which could help. I've noticed that you can delete really long paths while using [7-Zip](http://www.7-zip.org/) File Manager to browse files.\n\n### Runtime errors\n\nIf you've ran into actual bugs caused by this, you could find a module halfway down the dependency graph and add it as a dependency to your project so it will be installed under the top level `node_modules` and not a `node_modules` directory n levels deep. Make sure to install the correct version and test thoroughly.\n\nThere are also a few Node modules out there which \"flatten\" your dependency graph. The downside to these modules is that if there is a conflict (package A depends on version 1.0.0 of package Z and package B depends on version 3.2.1 of package Z) then the latest version of the module (package Z) is used, which could be problematic. So be careful.\n\n### Can't npm fix this?\n\n~~You might see people reference Windows APIs (which support long paths) as a possible fix but it is [very unlikely](https://github.com/joyent/node/issues/6960#issuecomment-46704998) <span style=\"text-decoration: line-through;\">this will be fixed in npm.[npm dedupe](https://docs.npmjs.com/cli/dedupe) _should_ help with this too but it's not reliable in my experience.~~\n\nYes, they, can! This has been fixed as of [npm 3.0.0](https://github.com/npm/npm/releases/tag/v3.0.0) (yet to be released).\n\nYour dependencies will now be installed _maximally_ flat. Insofar as is possible, all of your dependencies, and their dependencies, and THEIR dependencies will be installed in your project's `node_modules` folder with no nesting. You'll only see modules nested underneath one another when two (or more) modules have conflicting dependencies.\n\nExcuse me...\n\n:::figure npm-distribution-path-length-problems/dance.gif \\* Dances \\*\n:::\n\nMind you, it's a bit late for me. Unless npm 3 also ships with a time machine. More about that in a bit.\n\n### Manually checking for exceedingly long paths\n\nUp until now, I've had to routinely check for long paths using [Path Length Checker](https://pathlengthchecker.codeplex.com/) (on Windows) but a manual check is not good enough as stuff can still slip through the net.\n\n### Introducing gulp-path-length\n\nSo there's a simple [Gulp](http://gulpjs.com) plugin to help with this; [gulp-path-length](https://github.com/Teamwork/gulp-path-length). You could use it like this in a Gulp task:\n\n```javascript\nvar gulp = require('gulp');\nvar pathLength = require('gulp-path-length');\n\ngulp.task('default', function(){\n  gulp.src('./example/path/to/directory/**', {read: false})\n      .pipe(pathLength());\n});\n```\n\nIf all is well, nothing will happen. If you have a path exceeding 256 characters, the gulp task will stop and an error reveal the offending path. This is really fast either way as Gulp doesn't need to read the contents of the files. The limit can be changed with a parameter; i.e. `.pipe(pathLength({ maxLength: 50 });`.\n\nThis is fine if it's just for you locally but there are bigger fish to fry.\n\n### Distributed long paths\n\nWhat if there are multiple developers working on your project? What if a developer is using Mac OS X or Linux? There could easily be false positives. It's one thing having issues locally or within a team, it's a whole other thing to have path length problems in production on end users machines.\n\nI've had that pleasure myself with [Teamwork Chat](https://www.teamwork.com/chat), which we built on top of [NW.js](https://github.com/nwjs/nw.js). NW.js is basically Node.js and Chromium mashed together to allow you to create desktop apps from Web apps. Any NW.js can access all of node's core modules and any other modules you've installed from nom, for example. Therefore the npm - Windows path length issue applies here too. Depending on how long the end user's username was, the user might've seen something like this when they tried to launch Teamwork Chat:\n\n:::figure npm-distribution-path-length-problems/fatal.png The NW.js fatal error screen\n:::\n\nA dummy application. None of our app code is executed. This means no error reports and no way the app could even auto-update once a patch was released. As a maintainer of [nw-builder](https://github.com/nwjs/nw-builder), I know we're not the only ones who have faced this problem.\n\n### Is there anything we can do?\n\nOnce the code is shipped, it's too late. Luckily in my case, we have a rough idea where the files will exist on end users machines thanks to our Windows installer. This is where gulp-path-length's rewrite option comes in. It can be used like this to simulate path lengths:\n\n```javascript\nvar gulp = require('gulp');\nvar pathLength = require('gulp-path-length');\n\ngulp.task('default', function(){\n  gulp.src('./example/path/to/directory/**', {read: false})\n    .pipe(pathLength({\n      rewrite: {\n        match: './example/path/to/directory/',\n        replacement: 'C:\\\\Users\\\\a-long-username-here\\\\AppData\\\\Blah\\\\Blah\\\\Blah'\n      }\n    }));\n});\n```\n\nSo it doesn't matter where you are on your filesystem or which operating system you're using, it will test the length of files in a given directory as if they're in a hypothetical directory on Windows.\n\nYou could run this before you ship your code but we've added this to a compilation build step so we catch it as early as possible. If a Mac developer adds really long paths to the project (like an npm dependency which depends on a chain of [lodash](https://lodash.com/) modules), they'll see right away that this will break stuff for some Windows users. For good measure, we also run it in a continuous integration step.\n",
  "unfilteredRenderedBody": "<h2><a id=\"npm-and-distribution-path-length-problems\" class=\"post-header-anchor\" href=\"#npm-and-distribution-path-length-problems\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>npm and distribution path length problems</h2>\n<article-summary><p>You might have been unfortunate enough to learn that Windows has a 256 character limit on file paths. You could've ran into this problem locally or on end users' machines. There's no real workaround but there are preventive measures you can take. Even if you haven't, feel free to take pleasure from reading my horror story.</p>\n</article-summary><h3><a id=\"npm\" class=\"post-header-anchor\" href=\"#npm\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>npm</h3>\n<p>Neither this problem nor our solution are exclusive to Node.js but a lot of the victims of the path length problem were probably running Node.js on Windows. Windows users know that they get left out in the cold often by npm package maintainers but even <a href=\"https://github.com/joyent/node/issues/6960#issuecomment-46704998\" rel=\"noopener\">the design of npm itself is a problem on Windows from the get-go</a>.</p>\n<p>npm stores your dependencies (listed in your package.json) in a <code>node_modules</code> directory. If those dependencies have dependencies of their own they're stored in their own <code>node_modules</code> directory (i.e. <code>your-project/node_modules/a/node_modules/b/</code>) and so on recursively. It's nice but in hindsight it's obviously incompatible with Windows's path length limit.</p>\n<h3><a id=\"delete-delete-delete\" class=\"post-header-anchor\" href=\"#delete-delete-delete\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Delete delete delete</h3>\n<p>Most people have probably been lucky enough to only have come across this problem when trying to delete dependencies where then Windows complains that the path is too long.</p>\n<p>A simple way around this is to take a module halfway down deep into your dependency graph (i.e. <code>node_modules/a/node_modules/b/node_modules/c/.../node_modules/h/</code>) in Windows Explorer and move it somewhere closer to the root (e.g. <code>node_modules/</code>) to cut the file path down before trying to delete it again. This would have to be repeated for every culprit.</p>\n<p>There are also some tools which could help. I've noticed that you can delete really long paths while using <a href=\"http://www.7-zip.org/\" rel=\"noopener\">7-Zip</a> File Manager to browse files.</p>\n<h3><a id=\"runtime-errors\" class=\"post-header-anchor\" href=\"#runtime-errors\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Runtime errors</h3>\n<p>If you've ran into actual bugs caused by this, you could find a module halfway down the dependency graph and add it as a dependency to your project so it will be installed under the top level <code>node_modules</code> and not a <code>node_modules</code> directory n levels deep. Make sure to install the correct version and test thoroughly.</p>\n<p>There are also a few Node modules out there which &quot;flatten&quot; your dependency graph. The downside to these modules is that if there is a conflict (package A depends on version 1.0.0 of package Z and package B depends on version 3.2.1 of package Z) then the latest version of the module (package Z) is used, which could be problematic. So be careful.</p>\n<h3><a id=\"cant-npm-fix-this\" class=\"post-header-anchor\" href=\"#cant-npm-fix-this\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Can't npm fix this?</h3>\n<p><s>You might see people reference Windows APIs (which support long paths) as a possible fix but it is <a href=\"https://github.com/joyent/node/issues/6960#issuecomment-46704998\" rel=\"noopener\">very unlikely</a> <span style=\"text-decoration: line-through;\">this will be fixed in npm.<a href=\"https://docs.npmjs.com/cli/dedupe\" rel=\"noopener\">npm dedupe</a> <em>should</em> help with this too but it's not reliable in my experience.</s></p>\n<p>Yes, they, can! This has been fixed as of <a href=\"https://github.com/npm/npm/releases/tag/v3.0.0\" rel=\"noopener\">npm 3.0.0</a> (yet to be released).</p>\n<p>Your dependencies will now be installed <em>maximally</em> flat. Insofar as is possible, all of your dependencies, and their dependencies, and THEIR dependencies will be installed in your project's <code>node_modules</code> folder with no nesting. You'll only see modules nested underneath one another when two (or more) modules have conflicting dependencies.</p>\n<p>Excuse me...</p>\n<figure>\n          <a href=\"/images/blog-content/npm-distribution-path-length-problems/dance.gif\"><img src=\"/images/blog-content/npm-distribution-path-length-problems/dance.gif\" alt=\"\"/></a>\n          <figcaption><p>* Dances *</p>\n</figcaption>\n        </figure><p>Mind you, it's a bit late for me. Unless npm 3 also ships with a time machine. More about that in a bit.</p>\n<h3><a id=\"manually-checking-for-exceedingly-long-paths\" class=\"post-header-anchor\" href=\"#manually-checking-for-exceedingly-long-paths\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Manually checking for exceedingly long paths</h3>\n<p>Up until now, I've had to routinely check for long paths using <a href=\"https://pathlengthchecker.codeplex.com/\" rel=\"noopener\">Path Length Checker</a> (on Windows) but a manual check is not good enough as stuff can still slip through the net.</p>\n<h3><a id=\"introducing-gulp-path-length\" class=\"post-header-anchor\" href=\"#introducing-gulp-path-length\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Introducing gulp-path-length</h3>\n<p>So there's a simple <a href=\"http://gulpjs.com\" rel=\"noopener\">Gulp</a> plugin to help with this; <a href=\"https://github.com/Teamwork/gulp-path-length\" rel=\"noopener\">gulp-path-length</a>. You could use it like this in a Gulp task:</p>\n<pre><code class=\"language-javascript\"><span class=\"token keyword\">var</span> gulp <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gulp'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> pathLength <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gulp-path-length'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ngulp<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token string\">'default'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  gulp<span class=\"token punctuation\">.</span><span class=\"token function\">src</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./example/path/to/directory/**'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>read<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">pathLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>If all is well, nothing will happen. If you have a path exceeding 256 characters, the gulp task will stop and an error reveal the offending path. This is really fast either way as Gulp doesn't need to read the contents of the files. The limit can be changed with a parameter; i.e. <code>.pipe(pathLength({ maxLength: 50 });</code>.</p>\n<p>This is fine if it's just for you locally but there are bigger fish to fry.</p>\n<h3><a id=\"distributed-long-paths\" class=\"post-header-anchor\" href=\"#distributed-long-paths\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Distributed long paths</h3>\n<p>What if there are multiple developers working on your project? What if a developer is using Mac OS X or Linux? There could easily be false positives. It's one thing having issues locally or within a team, it's a whole other thing to have path length problems in production on end users machines.</p>\n<p>I've had that pleasure myself with <a href=\"https://www.teamwork.com/chat\" rel=\"noopener\">Teamwork Chat</a>, which we built on top of <a href=\"https://github.com/nwjs/nw.js\" rel=\"noopener\">NW.js</a>. NW.js is basically Node.js and Chromium mashed together to allow you to create desktop apps from Web apps. Any NW.js can access all of node's core modules and any other modules you've installed from nom, for example. Therefore the npm - Windows path length issue applies here too. Depending on how long the end user's username was, the user might've seen something like this when they tried to launch Teamwork Chat:</p>\n<figure>\n          <a href=\"/images/blog-content/npm-distribution-path-length-problems/fatal.png\"><img src=\"/images/blog-content/npm-distribution-path-length-problems/fatal.png\" alt=\"\"/></a>\n          <figcaption><p>The NW.js fatal error screen</p>\n</figcaption>\n        </figure><p>A dummy application. None of our app code is executed. This means no error reports and no way the app could even auto-update once a patch was released. As a maintainer of <a href=\"https://github.com/nwjs/nw-builder\" rel=\"noopener\">nw-builder</a>, I know we're not the only ones who have faced this problem.</p>\n<h3><a id=\"is-there-anything-we-can-do\" class=\"post-header-anchor\" href=\"#is-there-anything-we-can-do\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Is there anything we can do?</h3>\n<p>Once the code is shipped, it's too late. Luckily in my case, we have a rough idea where the files will exist on end users machines thanks to our Windows installer. This is where gulp-path-length's rewrite option comes in. It can be used like this to simulate path lengths:</p>\n<pre><code class=\"language-javascript\"><span class=\"token keyword\">var</span> gulp <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gulp'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> pathLength <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gulp-path-length'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ngulp<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token string\">'default'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  gulp<span class=\"token punctuation\">.</span><span class=\"token function\">src</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./example/path/to/directory/**'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>read<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">pathLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      rewrite<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        match<span class=\"token punctuation\">:</span> <span class=\"token string\">'./example/path/to/directory/'</span><span class=\"token punctuation\">,</span>\n        replacement<span class=\"token punctuation\">:</span> <span class=\"token string\">'C:\\\\Users\\\\a-long-username-here\\\\AppData\\\\Blah\\\\Blah\\\\Blah'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>So it doesn't matter where you are on your filesystem or which operating system you're using, it will test the length of files in a given directory as if they're in a hypothetical directory on Windows.</p>\n<p>You could run this before you ship your code but we've added this to a compilation build step so we catch it as early as possible. If a Mac developer adds really long paths to the project (like an npm dependency which depends on a chain of <a href=\"https://lodash.com/\" rel=\"noopener\">lodash</a> modules), they'll see right away that this will break stuff for some Windows users. For good measure, we also run it in a continuous integration step.</p>\n",
  "attributes": {
    "date": "2015-12-07T00:00:00.000Z",
    "summary": "NW.js is great for creating desktop applications using Web app technologies. If you're not familiar with NW.js, I'd advise you to read an introductory article like Creating Your First Desktop App With HTML, JS and Node-WebKit to get a good base first. This is a slightly more advanced article intended for anyone interested into distributing their NW.js app to Windows users.",
    "original": {
      "blogLink": "https://www.packtpub.com/books/content/blogs",
      "blogName": "Packt books",
      "url": "https://www.packtpub.com/books/content/npm-and-distribution-path-length-problems"
    },
    "tags": [
      {
        "id": "node-webkit",
        "name": "node-webkit"
      },
      {
        "id": "desktop",
        "name": "desktop"
      },
      {
        "id": "javascript",
        "name": "javascript"
      },
      {
        "id": "npm",
        "name": "npm"
      },
      {
        "id": "distribution",
        "name": "distribution"
      },
      {
        "id": "windows",
        "name": "windows"
      },
      {
        "id": "paths",
        "name": "paths"
      }
    ],
    "title": "npm and distribution path length problems",
    "updated_at": "2018-08-05T16:25:28.069Z",
    "photo": "/images/blog-content/npm-distribution-path-length-problems/dance.gif"
  },
  "title": "npm and distribution path length problems",
  "renderedSummary": "<p>NW.js is great for creating desktop applications using Web app technologies. If you're not familiar with NW.js, I'd advise you to read an introductory article like Creating Your First Desktop App With HTML, JS and Node-WebKit to get a good base first. This is a slightly more advanced article intended for anyone interested into distributing their NW.js app to Windows users.</p>\n",
  "rendered": "<h2><a id=\"npm-and-distribution-path-length-problems\" class=\"post-header-anchor\" href=\"#npm-and-distribution-path-length-problems\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>npm and distribution path length problems</h2>\n<p>You might have been unfortunate enough to learn that Windows has a 256 character limit on file paths. You could've ran into this problem locally or on end users' machines. There's no real workaround but there are preventive measures you can take. Even if you haven't, feel free to take pleasure from reading my horror story.</p>\n<h3><a id=\"npm\" class=\"post-header-anchor\" href=\"#npm\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>npm</h3>\n<p>Neither this problem nor our solution are exclusive to Node.js but a lot of the victims of the path length problem were probably running Node.js on Windows. Windows users know that they get left out in the cold often by npm package maintainers but even <a href=\"https://github.com/joyent/node/issues/6960#issuecomment-46704998\" rel=\"noopener\">the design of npm itself is a problem on Windows from the get-go</a>.</p>\n<p>npm stores your dependencies (listed in your package.json) in a <code>node_modules</code> directory. If those dependencies have dependencies of their own they're stored in their own <code>node_modules</code> directory (i.e. <code>your-project/node_modules/a/node_modules/b/</code>) and so on recursively. It's nice but in hindsight it's obviously incompatible with Windows's path length limit.</p>\n<h3><a id=\"delete-delete-delete\" class=\"post-header-anchor\" href=\"#delete-delete-delete\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Delete delete delete</h3>\n<p>Most people have probably been lucky enough to only have come across this problem when trying to delete dependencies where then Windows complains that the path is too long.</p>\n<p>A simple way around this is to take a module halfway down deep into your dependency graph (i.e. <code>node_modules/a/node_modules/b/node_modules/c/.../node_modules/h/</code>) in Windows Explorer and move it somewhere closer to the root (e.g. <code>node_modules/</code>) to cut the file path down before trying to delete it again. This would have to be repeated for every culprit.</p>\n<p>There are also some tools which could help. I've noticed that you can delete really long paths while using <a href=\"http://www.7-zip.org/\" rel=\"noopener\">7-Zip</a> File Manager to browse files.</p>\n<h3><a id=\"runtime-errors\" class=\"post-header-anchor\" href=\"#runtime-errors\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Runtime errors</h3>\n<p>If you've ran into actual bugs caused by this, you could find a module halfway down the dependency graph and add it as a dependency to your project so it will be installed under the top level <code>node_modules</code> and not a <code>node_modules</code> directory n levels deep. Make sure to install the correct version and test thoroughly.</p>\n<p>There are also a few Node modules out there which &quot;flatten&quot; your dependency graph. The downside to these modules is that if there is a conflict (package A depends on version 1.0.0 of package Z and package B depends on version 3.2.1 of package Z) then the latest version of the module (package Z) is used, which could be problematic. So be careful.</p>\n<h3><a id=\"cant-npm-fix-this\" class=\"post-header-anchor\" href=\"#cant-npm-fix-this\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Can't npm fix this?</h3>\n<p><s>You might see people reference Windows APIs (which support long paths) as a possible fix but it is <a href=\"https://github.com/joyent/node/issues/6960#issuecomment-46704998\" rel=\"noopener\">very unlikely</a> <span style=\"text-decoration: line-through;\">this will be fixed in npm.<a href=\"https://docs.npmjs.com/cli/dedupe\" rel=\"noopener\">npm dedupe</a> <em>should</em> help with this too but it's not reliable in my experience.</s></p>\n<p>Yes, they, can! This has been fixed as of <a href=\"https://github.com/npm/npm/releases/tag/v3.0.0\" rel=\"noopener\">npm 3.0.0</a> (yet to be released).</p>\n<p>Your dependencies will now be installed <em>maximally</em> flat. Insofar as is possible, all of your dependencies, and their dependencies, and THEIR dependencies will be installed in your project's <code>node_modules</code> folder with no nesting. You'll only see modules nested underneath one another when two (or more) modules have conflicting dependencies.</p>\n<p>Excuse me...</p>\n<figure>\n          <a href=\"/images/blog-content/npm-distribution-path-length-problems/dance.gif\"><img src=\"/images/blog-content/npm-distribution-path-length-problems/dance.gif\" alt=\"\"/></a>\n          <figcaption><p>* Dances *</p>\n</figcaption>\n        </figure><p>Mind you, it's a bit late for me. Unless npm 3 also ships with a time machine. More about that in a bit.</p>\n<h3><a id=\"manually-checking-for-exceedingly-long-paths\" class=\"post-header-anchor\" href=\"#manually-checking-for-exceedingly-long-paths\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Manually checking for exceedingly long paths</h3>\n<p>Up until now, I've had to routinely check for long paths using <a href=\"https://pathlengthchecker.codeplex.com/\" rel=\"noopener\">Path Length Checker</a> (on Windows) but a manual check is not good enough as stuff can still slip through the net.</p>\n<h3><a id=\"introducing-gulp-path-length\" class=\"post-header-anchor\" href=\"#introducing-gulp-path-length\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Introducing gulp-path-length</h3>\n<p>So there's a simple <a href=\"http://gulpjs.com\" rel=\"noopener\">Gulp</a> plugin to help with this; <a href=\"https://github.com/Teamwork/gulp-path-length\" rel=\"noopener\">gulp-path-length</a>. You could use it like this in a Gulp task:</p>\n<pre><code class=\"language-javascript\"><span class=\"token keyword\">var</span> gulp <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gulp'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> pathLength <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gulp-path-length'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ngulp<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token string\">'default'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  gulp<span class=\"token punctuation\">.</span><span class=\"token function\">src</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./example/path/to/directory/**'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>read<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">pathLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>If all is well, nothing will happen. If you have a path exceeding 256 characters, the gulp task will stop and an error reveal the offending path. This is really fast either way as Gulp doesn't need to read the contents of the files. The limit can be changed with a parameter; i.e. <code>.pipe(pathLength({ maxLength: 50 });</code>.</p>\n<p>This is fine if it's just for you locally but there are bigger fish to fry.</p>\n<h3><a id=\"distributed-long-paths\" class=\"post-header-anchor\" href=\"#distributed-long-paths\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Distributed long paths</h3>\n<p>What if there are multiple developers working on your project? What if a developer is using Mac OS X or Linux? There could easily be false positives. It's one thing having issues locally or within a team, it's a whole other thing to have path length problems in production on end users machines.</p>\n<p>I've had that pleasure myself with <a href=\"https://www.teamwork.com/chat\" rel=\"noopener\">Teamwork Chat</a>, which we built on top of <a href=\"https://github.com/nwjs/nw.js\" rel=\"noopener\">NW.js</a>. NW.js is basically Node.js and Chromium mashed together to allow you to create desktop apps from Web apps. Any NW.js can access all of node's core modules and any other modules you've installed from nom, for example. Therefore the npm - Windows path length issue applies here too. Depending on how long the end user's username was, the user might've seen something like this when they tried to launch Teamwork Chat:</p>\n<figure>\n          <a href=\"/images/blog-content/npm-distribution-path-length-problems/fatal.png\"><img src=\"/images/blog-content/npm-distribution-path-length-problems/fatal.png\" alt=\"\"/></a>\n          <figcaption><p>The NW.js fatal error screen</p>\n</figcaption>\n        </figure><p>A dummy application. None of our app code is executed. This means no error reports and no way the app could even auto-update once a patch was released. As a maintainer of <a href=\"https://github.com/nwjs/nw-builder\" rel=\"noopener\">nw-builder</a>, I know we're not the only ones who have faced this problem.</p>\n<h3><a id=\"is-there-anything-we-can-do\" class=\"post-header-anchor\" href=\"#is-there-anything-we-can-do\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Is there anything we can do?</h3>\n<p>Once the code is shipped, it's too late. Luckily in my case, we have a rough idea where the files will exist on end users machines thanks to our Windows installer. This is where gulp-path-length's rewrite option comes in. It can be used like this to simulate path lengths:</p>\n<pre><code class=\"language-javascript\"><span class=\"token keyword\">var</span> gulp <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gulp'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> pathLength <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gulp-path-length'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ngulp<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token string\">'default'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  gulp<span class=\"token punctuation\">.</span><span class=\"token function\">src</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./example/path/to/directory/**'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>read<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">pathLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      rewrite<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        match<span class=\"token punctuation\">:</span> <span class=\"token string\">'./example/path/to/directory/'</span><span class=\"token punctuation\">,</span>\n        replacement<span class=\"token punctuation\">:</span> <span class=\"token string\">'C:\\\\Users\\\\a-long-username-here\\\\AppData\\\\Blah\\\\Blah\\\\Blah'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>So it doesn't matter where you are on your filesystem or which operating system you're using, it will test the length of files in a given directory as if they're in a hypothetical directory on Windows.</p>\n<p>You could run this before you ship your code but we've added this to a compilation build step so we catch it as early as possible. If a Mac developer adds really long paths to the project (like an npm dependency which depends on a chain of <a href=\"https://lodash.com/\" rel=\"noopener\">lodash</a> modules), they'll see right away that this will break stuff for some Windows users. For good measure, we also run it in a continuous integration step.</p>\n",
  "summary": "NW.js is great for creating desktop applications using Web app technologies. If you're not familiar with NW.js, I'd advise you to read an introductory article like Creating Your First Desktop App With HTML, JS and Node-WebKit to get a good base first. This is a slightly more advanced article intended for anyone interested into distributing their NW.js app to Windows users.\n",
  "original": {
    "blogLink": "https://www.packtpub.com/books/content/blogs",
    "blogName": "Packt books",
    "url": "https://www.packtpub.com/books/content/npm-and-distribution-path-length-problems"
  },
  "photo": "/images/blog-content/npm-distribution-path-length-problems/dance.gif",
  "keywords": [
    "node-webkit",
    "desktop",
    "javascript",
    "npm",
    "distribution",
    "windows",
    "paths"
  ],
  "published_at": "2015-12-07T00:00:00.000Z",
  "updated_at": "2018-08-05T16:25:28.069Z",
  "year": 2015,
  "month": 12,
  "day": 8,
  "next": {
    "id": "lessons-learned-leading-teams",
    "slug": "lessons-learned-leading-teams",
    "collection": null,
    "keywords": [
      "leadership",
      "management",
      "teams",
      "development",
      "lead",
      "leading",
      "managing",
      "manager",
      "programming",
      "delegating",
      "efficiency",
      "communication",
      "people",
      "technical",
      "transition",
      "job",
      "career",
      "growth",
      "product management",
      "project management",
      "product lead",
      "technical lead",
      "lead developer"
    ],
    "title": "Lessons learned leading teams",
    "summary": "I've been thinking about team leading a lot lately. When revisiting advice a friend asked for when transitioning to a team lead position, I decided to flesh it out and put it online. Most of the following will hopefully be helpful to anyone leading a team or any manager, although some will be more relevant to leaders of developers and developers transitioning into leadership roles. If it helps anyone, great. It will be a good reference for me at least. Alright, let's get to it.\n",
    "photo": "/images/blog-content/lessons-learned-leading-teams/graph.png",
    "published_at": "2018-11-14T00:00:00.000Z",
    "renderedSummary": "<p>I've been thinking about team leading a lot lately. When revisiting advice a friend asked for when transitioning to a team lead position, I decided to flesh it out and put it online. Most of the following will hopefully be helpful to anyone leading a team or any manager, although some will be more relevant to leaders of developers and developers transitioning into leadership roles. If it helps anyone, great. It will be a good reference for me at least. Alright, let's get to it.</p>\n"
  },
  "prev": {
    "id": "serverless-crash-reporting-for-electron-apps",
    "slug": "serverless-crash-reporting-for-electron-apps",
    "collection": null,
    "keywords": [
      "serverless",
      "electron",
      "javascript",
      "aws"
    ],
    "original": {
      "blogLink": "https://engineroom.teamwork.com",
      "blogName": "Teamwork's Engine Room",
      "url": "https://engineroom.teamwork.com/serverless-crash-reporting-for-electron-apps-fe6e62e5982a"
    },
    "title": "Serverless crash reporting for Electron apps",
    "summary": "The term “serverless” has been trendy for a while now. In this post, I’m going to share my experience dabbling with serverless architecture, specifically for handling crash reports from Electron apps.\n",
    "photo": "https://cdn-images-1.medium.com/max/1600/1*7_8IQl1UmmFdv-Z3EwGNJg.png",
    "published_at": "2016-11-22T00:00:00.000Z",
    "renderedSummary": "<p>The term “serverless” has been trendy for a while now. In this post, I’m going to share my experience dabbling with serverless architecture, specifically for handling crash reports from <a href=\"http://electron.atom.io/\" rel=\"noopener\">Electron</a> apps.</p>\n"
  }
}