{
  "id": "olc-ruin-someones-day-with-homoglyphs",
  "slug": "olc-ruin-someones-day-with-homoglyphs",
  "highlightedLanguages": [
    "javascript"
  ],
  "source": "---\ndate: 2015-10-27\nsummary: You might have seen Ben Johnson’s tweet. I’m sorry everyone, I’ve made a module which makes this a lot easier to do. It’s called Olc. “Olc” is the Irish word for “bad” and is inconspicious enough to go… \noriginal:\n  blogLink: https://engineroom.teamwork.com\n  blogName: Teamwork's Engine Room\n  url: https://engineroom.teamwork.com/olc-ruin-someones-day-with-homoglyphs-b14e9a1a05a4\ntags:\n  - javascript\n  - node.js\n  - homoglyphs\n  - prank\n  - development\n---\n\n## Olc: Ruin someone’s day with homoglyphs\n\n![](/images/blog-content/olc-ruin-someones-day-with-homoglyphs/tweet.png)\n\nYou might have seen Ben Johnson’s [tweet](https://twitter.com/benbjohnson/status/533848879423578112). I’m sorry everyone, I’ve made a module which makes this a lot easier to do. It’s called [Olc](https://github.com/adam-lynch/olc). “Olc” is the Irish word for “bad” and is inconspicious enough to go unnoticed if added to a project on the sly.\n\n```javascript\nvar gulp = require('gulp');\nvar olc = require('olc');\n\ngulp.task('default', function() { \n  gulp.src('*.js')\n    .pipe(olc())\n    .pipe(gulp.dest('./output'));\n});\n```\n\nThat's the simplest way to run Olc on some files (with [Gulp](http://gulpjs.com/)). Yay, syntax errors. See [the readme](https://github.com/adam-lynch/olc#basic-usage-without-gulp) for standalone usage if you'd prefer not to use Gulp.\n\n### Options\n\nSo only semi-colons are replaced by default as the ~~specification~~ tweet says. For added frustration, any of the following characters can be replaced with homgraphs / homoglyphs: `!`, `(`, `)`, `+`, `,`, `.`, `/`, `:`, `;`, `<`, and `>`.\n\n```javascript\ngulp.src('*.js')\n  .pipe(olc({ mode: 'all' }))\n  .pipe(gulp.dest('./output'));\n```\n\nThe `mode` option supports three modes so far;\n\n- `greek`: The default.\n- `all`: Replace all of the supported characters with homoglyph. Some characters have multiple homographs and one is chosen at random as the replacement each time an occurance is found.\n- `one`: Chooses one target character at random and replaces it throughout each file with its homoglyphs. Therefore, each time the code is run, the error and location could change.\n\nAlternatively, you can could pass a `charactersToReplace` option (as a string or array of characters) to explicitly choose how you'd like to inflict the pain.\n\n```javascript\nolc({ charactersToReplace: ';)('})// or olc({ charactersToReplace: [';', ')', '('] })\n```\n\n### Behind the scenes\n\nOlc handles what should be replaced with what and leaves the real work to [gulp-replace](https://github.com/lazd/gulp-replace) underneath. The most interesting thing was testing this. I like having comprehensive tests for my modules. I like hooking them up to [Travis-CI](https://travis-ci.org) (Linux) and [Appveyor](http://www.appveyor.com/) (Windows) to run the tests on every commit (via GitHub webhook). But how could this be tested?\n\nTesting the `greek` mode is simple as you just need to check the output against a file containing the expected contents, but how can you test the `one` mode? How can you check that a random character of a set is replaced throughout? Keep in mind that each occurrence would be replaced with one of the character's homoglyphs chosen at random. That sounds like a lot of hassle.\n\nSet theory was the answer. Treating each character as a unique element of a set simplifies everything. Each of the following must be confirmed:\n\n- All instances of only one character were replaced.\n- The replaced character was a supported target character.\n- Every character added must be a homoglyph of the replaced character.\n\nLet's take this code (which contains all possible target characters) as example contents of a file:\n\n```javascript\nmodule.exports = function(){  \n  console.log('Tada...!' \"<<<\");\n  var a = 0; \n  a = (a > 2 ? 4 : 5 / 2);  \n  return [0, 1];\n};\n```\n\nLet's assume that all semi-colons were replaced and all of its homoglyphs were used. Here's a Venn diagram:\n\n\n:::figure olc-ruin-someones-day-with-homoglyphs/venn.png A Venn diagram containing all characters, showing that most of the characters are unchanged.\n:::\n\n### All instances of only one character were replaced\n\nWhich characters were replaced? That's the characters in the original set which aren't in the new set, also known as the relative-complement of new set in the original, or simply as the difference of the original and new set. This will leave us with the characters from the left-hand side of the diagram. Once the cardinality of the difference is one, then all is ok.\n\n### The replaced character was a supported target character\n\nThat's easy. We just need to check if the only element (`;`) in the difference is [one we support](https://github.com/adam-lynch/olc/blob/master/homographs.json).\n\n### Every character added must be a homoglyph of the replaced character\n\nSo, now we need to know which characters were added. That's the difference of the new set and the original set, i.e. everything on the right-hand side of the diagram. Once every one of those elements is a homoglyth of the target character, then we've covered everything, so the tests pass.\n\n### The end result\n\n::: figure olc-ruin-someones-day-with-homoglyphs/test-results.png The results of the tests\n:::\n\nThe `[simplesets](https://github.com/PeterScott/simplesets-nodejs)` module made light work of the set stuff and I also used [mocha](https://mochajs.org/), [should](http://shouldjs.github.io/), and a few other modules for plumbing to implement [the tests](https://github.com/adam-lynch/olc/blob/master/test/index.js). Check out [Olc on GitHub](https://github.com/adam-lynch/olc), feel free to submit a pull-request, or use Olc on someone you know but make sure to blame Ben Johnson.\n",
  "unfilteredRenderedBody": "<h2><a id=\"olc-ruin-someones-day-with-homoglyphs\" class=\"post-header-anchor\" href=\"#olc-ruin-someones-day-with-homoglyphs\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Olc: Ruin someone’s day with homoglyphs</h2>\n<p><img src=\"/images/blog-content/olc-ruin-someones-day-with-homoglyphs/tweet.png\" alt=\"\"></p>\n<p>You might have seen Ben Johnson’s <a href=\"https://twitter.com/benbjohnson/status/533848879423578112\" rel=\"noopener\">tweet</a>. I’m sorry everyone, I’ve made a module which makes this a lot easier to do. It’s called <a href=\"https://github.com/adam-lynch/olc\" rel=\"noopener\">Olc</a>. “Olc” is the Irish word for “bad” and is inconspicious enough to go unnoticed if added to a project on the sly.</p>\n<pre><code class=\"language-javascript\"><span class=\"token keyword\">var</span> gulp <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gulp'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> olc <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'olc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ngulp<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token string\">'default'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n  gulp<span class=\"token punctuation\">.</span><span class=\"token function\">src</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*.js'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">olc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>gulp<span class=\"token punctuation\">.</span><span class=\"token function\">dest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./output'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>That's the simplest way to run Olc on some files (with <a href=\"http://gulpjs.com/\" rel=\"noopener\">Gulp</a>). Yay, syntax errors. See <a href=\"https://github.com/adam-lynch/olc#basic-usage-without-gulp\" rel=\"noopener\">the readme</a> for standalone usage if you'd prefer not to use Gulp.</p>\n<h3><a id=\"options\" class=\"post-header-anchor\" href=\"#options\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Options</h3>\n<p>So only semi-colons are replaced by default as the <s>specification</s> tweet says. For added frustration, any of the following characters can be replaced with homgraphs / homoglyphs: <code>!</code>, <code>(</code>, <code>)</code>, <code>+</code>, <code>,</code>, <code>.</code>, <code>/</code>, <code>:</code>, <code>;</code>, <code>&lt;</code>, and <code>&gt;</code>.</p>\n<pre><code class=\"language-javascript\">gulp<span class=\"token punctuation\">.</span><span class=\"token function\">src</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*.js'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">olc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> mode<span class=\"token punctuation\">:</span> <span class=\"token string\">'all'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>gulp<span class=\"token punctuation\">.</span><span class=\"token function\">dest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./output'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>The <code>mode</code> option supports three modes so far;</p>\n<ul>\n<li><code>greek</code>: The default.</li>\n<li><code>all</code>: Replace all of the supported characters with homoglyph. Some characters have multiple homographs and one is chosen at random as the replacement each time an occurance is found.</li>\n<li><code>one</code>: Chooses one target character at random and replaces it throughout each file with its homoglyphs. Therefore, each time the code is run, the error and location could change.</li>\n</ul>\n<p>Alternatively, you can could pass a <code>charactersToReplace</code> option (as a string or array of characters) to explicitly choose how you'd like to inflict the pain.</p>\n<pre><code class=\"language-javascript\"><span class=\"token function\">olc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> charactersToReplace<span class=\"token punctuation\">:</span> <span class=\"token string\">';)('</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// or olc({ charactersToReplace: [';', ')', '('] })</span>\n</code></pre>\n<h3><a id=\"behind-the-scenes\" class=\"post-header-anchor\" href=\"#behind-the-scenes\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Behind the scenes</h3>\n<p>Olc handles what should be replaced with what and leaves the real work to <a href=\"https://github.com/lazd/gulp-replace\" rel=\"noopener\">gulp-replace</a> underneath. The most interesting thing was testing this. I like having comprehensive tests for my modules. I like hooking them up to <a href=\"https://travis-ci.org\" rel=\"noopener\">Travis-CI</a> (Linux) and <a href=\"http://www.appveyor.com/\" rel=\"noopener\">Appveyor</a> (Windows) to run the tests on every commit (via GitHub webhook). But how could this be tested?</p>\n<p>Testing the <code>greek</code> mode is simple as you just need to check the output against a file containing the expected contents, but how can you test the <code>one</code> mode? How can you check that a random character of a set is replaced throughout? Keep in mind that each occurrence would be replaced with one of the character's homoglyphs chosen at random. That sounds like a lot of hassle.</p>\n<p>Set theory was the answer. Treating each character as a unique element of a set simplifies everything. Each of the following must be confirmed:</p>\n<ul>\n<li>All instances of only one character were replaced.</li>\n<li>The replaced character was a supported target character.</li>\n<li>Every character added must be a homoglyph of the replaced character.</li>\n</ul>\n<p>Let's take this code (which contains all possible target characters) as example contents of a file:</p>\n<pre><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>  \n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tada...!'</span> <span class=\"token string\">\"&lt;&lt;&lt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n  a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token operator\">?</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">5</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Let's assume that all semi-colons were replaced and all of its homoglyphs were used. Here's a Venn diagram:</p>\n<figure>\n          <a href=\"/images/blog-content/olc-ruin-someones-day-with-homoglyphs/venn.png\"><img src=\"/images/blog-content/olc-ruin-someones-day-with-homoglyphs/venn.png\" alt=\"\"/></a>\n          <figcaption><p>A Venn diagram containing all characters, showing that most of the characters are unchanged.</p>\n</figcaption>\n        </figure><h3><a id=\"all-instances-of-only-one-character-were-replaced\" class=\"post-header-anchor\" href=\"#all-instances-of-only-one-character-were-replaced\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>All instances of only one character were replaced</h3>\n<p>Which characters were replaced? That's the characters in the original set which aren't in the new set, also known as the relative-complement of new set in the original, or simply as the difference of the original and new set. This will leave us with the characters from the left-hand side of the diagram. Once the cardinality of the difference is one, then all is ok.</p>\n<h3><a id=\"the-replaced-character-was-a-supported-target-character\" class=\"post-header-anchor\" href=\"#the-replaced-character-was-a-supported-target-character\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>The replaced character was a supported target character</h3>\n<p>That's easy. We just need to check if the only element (<code>;</code>) in the difference is <a href=\"https://github.com/adam-lynch/olc/blob/master/homographs.json\" rel=\"noopener\">one we support</a>.</p>\n<h3><a id=\"every-character-added-must-be-a-homoglyph-of-the-replaced-character\" class=\"post-header-anchor\" href=\"#every-character-added-must-be-a-homoglyph-of-the-replaced-character\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Every character added must be a homoglyph of the replaced character</h3>\n<p>So, now we need to know which characters were added. That's the difference of the new set and the original set, i.e. everything on the right-hand side of the diagram. Once every one of those elements is a homoglyth of the target character, then we've covered everything, so the tests pass.</p>\n<h3><a id=\"the-end-result\" class=\"post-header-anchor\" href=\"#the-end-result\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>The end result</h3>\n<figure>\n          <a href=\"/images/blog-content/olc-ruin-someones-day-with-homoglyphs/test-results.png\"><img src=\"/images/blog-content/olc-ruin-someones-day-with-homoglyphs/test-results.png\" alt=\"\"/></a>\n          <figcaption><p>The results of the tests</p>\n</figcaption>\n        </figure><p>The <code>[simplesets](https://github.com/PeterScott/simplesets-nodejs)</code> module made light work of the set stuff and I also used <a href=\"https://mochajs.org/\" rel=\"noopener\">mocha</a>, <a href=\"http://shouldjs.github.io/\" rel=\"noopener\">should</a>, and a few other modules for plumbing to implement <a href=\"https://github.com/adam-lynch/olc/blob/master/test/index.js\" rel=\"noopener\">the tests</a>. Check out <a href=\"https://github.com/adam-lynch/olc\" rel=\"noopener\">Olc on GitHub</a>, feel free to submit a pull-request, or use Olc on someone you know but make sure to blame Ben Johnson.</p>\n",
  "attributes": {
    "date": "2015-10-27T00:00:00.000Z",
    "summary": "You might have seen Ben Johnson’s tweet. I’m sorry everyone, I’ve made a module which makes this a lot easier to do. It’s called Olc. “Olc” is the Irish word for “bad” and is inconspicious enough to go…",
    "original": {
      "blogLink": "https://engineroom.teamwork.com",
      "blogName": "Teamwork's Engine Room",
      "url": "https://engineroom.teamwork.com/olc-ruin-someones-day-with-homoglyphs-b14e9a1a05a4"
    },
    "tags": [
      {
        "id": "javascript",
        "name": "javascript"
      },
      {
        "id": "nodejs",
        "name": "node.js"
      },
      {
        "id": "homoglyphs",
        "name": "homoglyphs"
      },
      {
        "id": "prank",
        "name": "prank"
      },
      {
        "id": "development",
        "name": "development"
      }
    ],
    "title": "Olc: Ruin someone’s day with homoglyphs",
    "updated_at": "2019-05-22T08:26:05.616Z",
    "photo": "/images/blog-content/olc-ruin-someones-day-with-homoglyphs/tweet.png"
  },
  "title": "Olc: Ruin someone’s day with homoglyphs",
  "renderedSummary": "<p>You might have seen Ben Johnson’s tweet. I’m sorry everyone, I’ve made a module which makes this a lot easier to do. It’s called Olc. “Olc” is the Irish word for “bad” and is inconspicious enough to go…</p>\n",
  "rendered": "<h2><a id=\"olc-ruin-someones-day-with-homoglyphs\" class=\"post-header-anchor\" href=\"#olc-ruin-someones-day-with-homoglyphs\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Olc: Ruin someone’s day with homoglyphs</h2>\n<p><img src=\"/images/blog-content/olc-ruin-someones-day-with-homoglyphs/tweet.png\" alt=\"\"></p>\n<p>You might have seen Ben Johnson’s <a href=\"https://twitter.com/benbjohnson/status/533848879423578112\" rel=\"noopener\">tweet</a>. I’m sorry everyone, I’ve made a module which makes this a lot easier to do. It’s called <a href=\"https://github.com/adam-lynch/olc\" rel=\"noopener\">Olc</a>. “Olc” is the Irish word for “bad” and is inconspicious enough to go unnoticed if added to a project on the sly.</p>\n<pre><code class=\"language-javascript\"><span class=\"token keyword\">var</span> gulp <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gulp'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> olc <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'olc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ngulp<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token string\">'default'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n  gulp<span class=\"token punctuation\">.</span><span class=\"token function\">src</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*.js'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">olc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>gulp<span class=\"token punctuation\">.</span><span class=\"token function\">dest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./output'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>That's the simplest way to run Olc on some files (with <a href=\"http://gulpjs.com/\" rel=\"noopener\">Gulp</a>). Yay, syntax errors. See <a href=\"https://github.com/adam-lynch/olc#basic-usage-without-gulp\" rel=\"noopener\">the readme</a> for standalone usage if you'd prefer not to use Gulp.</p>\n<h3><a id=\"options\" class=\"post-header-anchor\" href=\"#options\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Options</h3>\n<p>So only semi-colons are replaced by default as the <s>specification</s> tweet says. For added frustration, any of the following characters can be replaced with homgraphs / homoglyphs: <code>!</code>, <code>(</code>, <code>)</code>, <code>+</code>, <code>,</code>, <code>.</code>, <code>/</code>, <code>:</code>, <code>;</code>, <code>&lt;</code>, and <code>&gt;</code>.</p>\n<pre><code class=\"language-javascript\">gulp<span class=\"token punctuation\">.</span><span class=\"token function\">src</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*.js'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">olc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> mode<span class=\"token punctuation\">:</span> <span class=\"token string\">'all'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>gulp<span class=\"token punctuation\">.</span><span class=\"token function\">dest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./output'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>The <code>mode</code> option supports three modes so far;</p>\n<ul>\n<li><code>greek</code>: The default.</li>\n<li><code>all</code>: Replace all of the supported characters with homoglyph. Some characters have multiple homographs and one is chosen at random as the replacement each time an occurance is found.</li>\n<li><code>one</code>: Chooses one target character at random and replaces it throughout each file with its homoglyphs. Therefore, each time the code is run, the error and location could change.</li>\n</ul>\n<p>Alternatively, you can could pass a <code>charactersToReplace</code> option (as a string or array of characters) to explicitly choose how you'd like to inflict the pain.</p>\n<pre><code class=\"language-javascript\"><span class=\"token function\">olc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> charactersToReplace<span class=\"token punctuation\">:</span> <span class=\"token string\">';)('</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// or olc({ charactersToReplace: [';', ')', '('] })</span>\n</code></pre>\n<h3><a id=\"behind-the-scenes\" class=\"post-header-anchor\" href=\"#behind-the-scenes\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Behind the scenes</h3>\n<p>Olc handles what should be replaced with what and leaves the real work to <a href=\"https://github.com/lazd/gulp-replace\" rel=\"noopener\">gulp-replace</a> underneath. The most interesting thing was testing this. I like having comprehensive tests for my modules. I like hooking them up to <a href=\"https://travis-ci.org\" rel=\"noopener\">Travis-CI</a> (Linux) and <a href=\"http://www.appveyor.com/\" rel=\"noopener\">Appveyor</a> (Windows) to run the tests on every commit (via GitHub webhook). But how could this be tested?</p>\n<p>Testing the <code>greek</code> mode is simple as you just need to check the output against a file containing the expected contents, but how can you test the <code>one</code> mode? How can you check that a random character of a set is replaced throughout? Keep in mind that each occurrence would be replaced with one of the character's homoglyphs chosen at random. That sounds like a lot of hassle.</p>\n<p>Set theory was the answer. Treating each character as a unique element of a set simplifies everything. Each of the following must be confirmed:</p>\n<ul>\n<li>All instances of only one character were replaced.</li>\n<li>The replaced character was a supported target character.</li>\n<li>Every character added must be a homoglyph of the replaced character.</li>\n</ul>\n<p>Let's take this code (which contains all possible target characters) as example contents of a file:</p>\n<pre><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>  \n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tada...!'</span> <span class=\"token string\">\"&lt;&lt;&lt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n  a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token operator\">?</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">5</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Let's assume that all semi-colons were replaced and all of its homoglyphs were used. Here's a Venn diagram:</p>\n<figure>\n          <a href=\"/images/blog-content/olc-ruin-someones-day-with-homoglyphs/venn.png\"><img src=\"/images/blog-content/olc-ruin-someones-day-with-homoglyphs/venn.png\" alt=\"\"/></a>\n          <figcaption><p>A Venn diagram containing all characters, showing that most of the characters are unchanged.</p>\n</figcaption>\n        </figure><h3><a id=\"all-instances-of-only-one-character-were-replaced\" class=\"post-header-anchor\" href=\"#all-instances-of-only-one-character-were-replaced\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>All instances of only one character were replaced</h3>\n<p>Which characters were replaced? That's the characters in the original set which aren't in the new set, also known as the relative-complement of new set in the original, or simply as the difference of the original and new set. This will leave us with the characters from the left-hand side of the diagram. Once the cardinality of the difference is one, then all is ok.</p>\n<h3><a id=\"the-replaced-character-was-a-supported-target-character\" class=\"post-header-anchor\" href=\"#the-replaced-character-was-a-supported-target-character\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>The replaced character was a supported target character</h3>\n<p>That's easy. We just need to check if the only element (<code>;</code>) in the difference is <a href=\"https://github.com/adam-lynch/olc/blob/master/homographs.json\" rel=\"noopener\">one we support</a>.</p>\n<h3><a id=\"every-character-added-must-be-a-homoglyph-of-the-replaced-character\" class=\"post-header-anchor\" href=\"#every-character-added-must-be-a-homoglyph-of-the-replaced-character\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Every character added must be a homoglyph of the replaced character</h3>\n<p>So, now we need to know which characters were added. That's the difference of the new set and the original set, i.e. everything on the right-hand side of the diagram. Once every one of those elements is a homoglyth of the target character, then we've covered everything, so the tests pass.</p>\n<h3><a id=\"the-end-result\" class=\"post-header-anchor\" href=\"#the-end-result\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>The end result</h3>\n<figure>\n          <a href=\"/images/blog-content/olc-ruin-someones-day-with-homoglyphs/test-results.png\"><img src=\"/images/blog-content/olc-ruin-someones-day-with-homoglyphs/test-results.png\" alt=\"\"/></a>\n          <figcaption><p>The results of the tests</p>\n</figcaption>\n        </figure><p>The <code>[simplesets](https://github.com/PeterScott/simplesets-nodejs)</code> module made light work of the set stuff and I also used <a href=\"https://mochajs.org/\" rel=\"noopener\">mocha</a>, <a href=\"http://shouldjs.github.io/\" rel=\"noopener\">should</a>, and a few other modules for plumbing to implement <a href=\"https://github.com/adam-lynch/olc/blob/master/test/index.js\" rel=\"noopener\">the tests</a>. Check out <a href=\"https://github.com/adam-lynch/olc\" rel=\"noopener\">Olc on GitHub</a>, feel free to submit a pull-request, or use Olc on someone you know but make sure to blame Ben Johnson.</p>\n",
  "summary": "You might have seen Ben Johnson’s tweet. I’m sorry everyone, I’ve made a module which makes this a lot easier to do. It’s called Olc. “Olc” is the Irish word for “bad” and is inconspicious enough to go…\n",
  "original": {
    "blogLink": "https://engineroom.teamwork.com",
    "blogName": "Teamwork's Engine Room",
    "url": "https://engineroom.teamwork.com/olc-ruin-someones-day-with-homoglyphs-b14e9a1a05a4"
  },
  "photo": "/images/blog-content/olc-ruin-someones-day-with-homoglyphs/tweet.png",
  "keywords": [
    "javascript",
    "node.js",
    "homoglyphs",
    "prank",
    "development"
  ],
  "published_at": "2015-10-27T00:00:00.000Z",
  "updated_at": "2019-05-22T08:26:05.616Z",
  "year": 2015,
  "month": 10,
  "day": 28,
  "relevanceScore": 0.20833333333333326,
  "next": {
    "id": "nwjs-app-and-shortcut-apis",
    "slug": "nwjs-app-and-shortcut-apis",
    "collection": null,
    "keywords": [
      "node-webkit",
      "desktop",
      "javascript",
      "app",
      "shortcut",
      "development"
    ],
    "original": {
      "blogLink": "https://www.packtpub.com/books/content/blogs",
      "blogName": "Packt books",
      "url": "https://www.packtpub.com/books/content/nwjs-app-and-shortcut-apis"
    },
    "title": "NW.js: The App and Shortcut APIs",
    "summary": "The NW.js GUI library provides an &quot;App&quot; API, which contains a variety of methods and properties, some of which are essential to pretty much any app, and some have more obscure use cases. You can access the API as follows...\n",
    "published_at": "2015-12-18T00:00:00.000Z",
    "renderedSummary": "<p>The NW.js GUI library provides an &quot;App&quot; API, which contains a variety of methods and properties, some of which are essential to pretty much any app, and some have more obscure use cases. You can access the API as follows...</p>\n"
  },
  "prev": {
    "id": "transparency-and-nwjs",
    "slug": "transparency-and-nwjs",
    "collection": null,
    "keywords": [
      "node-webkit",
      "desktop",
      "javascript",
      "platform",
      "linux",
      "mac",
      "windows",
      "development"
    ],
    "original": {
      "blogLink": "https://www.packtpub.com/books/content/blogs",
      "blogName": "Packt books",
      "url": "https://www.packtpub.com/books/content/transparency-and-nwjs"
    },
    "title": "Transparency and NW.js",
    "summary": "Yes, NW.js does support transparency, albeit it is disabled by default. One way to enable transparency is to use the transparency property to your application's manifest like this...\n",
    "photo": "/images/blog-content/transparency-and-nwjs/transparent-window-frame.png",
    "published_at": "2016-01-26T00:00:00.000Z",
    "renderedSummary": "<p>Yes, NW.js does support transparency, albeit it is disabled by default. One way to enable transparency is to use the transparency property to your application's manifest like this...</p>\n"
  },
  "moreArticles": [
    {
      "id": "flexible-data-tables-with-css-grid",
      "slug": "flexible-data-tables-with-css-grid",
      "collection": null,
      "keywords": [
        "css grid",
        "css",
        "javascript",
        "table",
        "data",
        "responsive design",
        "responsive",
        "flexbox",
        "resize column",
        "web app",
        "development",
        "crm",
        "sales"
      ],
      "title": "Flexible data tables with CSS Grid",
      "summary": "Now that we've launched, I can finally talk about the secret project I've been working on for the last two years. One interesting piece of the Teamwork CRM puzzle was the &quot;list view&quot;.\nIt's a powerful page component which exists seven times in the app — a table on steroids essentially. I could talk about it for days but I won't bore you. I'll focus on how we added a lot of flexibility with a few lines of CSS (Grid). Namely, how we lay out data-heavy tables, how we support resizing of columns, and more.\n",
      "photo": "/images/blog-content/flexible-data-tables-with-css-grid/wide3.png",
      "published_at": "2019-05-12T00:00:00.000Z",
      "renderedSummary": "<p>Now that we've launched, I can finally talk about the secret project I've been working on for the last two years. One interesting piece of the <a href=\"https://www.teamwork.com/crm\" rel=\"noopener\">Teamwork CRM</a> puzzle was the &quot;list view&quot;.</p>\n<p>It's a powerful page component which exists seven times in the app — a table on steroids essentially. I could talk about it for days but I won't bore you. I'll focus on how we added a lot of flexibility with a few lines of CSS (Grid). Namely, how we lay out data-heavy tables, how we support resizing of columns, and more.</p>\n"
    },
    {
      "id": "random-open-api",
      "slug": "random-open-api",
      "collection": null,
      "keywords": [
        "api",
        "open API",
        "public API",
        "twitter",
        "bot",
        "zeit",
        "now",
        "serverless",
        "faas",
        "node.js",
        "cron",
        "development"
      ],
      "title": "How I made the @randomOpenAPI Twitter bot in 42 minutes-ish",
      "summary": "I love APIs. Especially open APIs. I wish there were way more of them. There's a lot of data out there we can't get our hands on. Imagine all of the unborn apps, studies, and infographics.\nThe natural conclusion was to create a Twitter bot. Have you ever seen Stefan Judis' @randomMDN? It tweets a random article from MDN multiple times a day. I decided to create one of my own to raise awareness about open APIs. Plus it's an excuse for a small fun project.\n",
      "photo": "/images/blog-content/random-open-api/tweet.png",
      "published_at": "2019-02-02T00:00:00.000Z",
      "renderedSummary": "<p>I love APIs. Especially open APIs. I wish there were way more of them. There's a lot of data out there we can't get our hands on. Imagine all of the unborn apps, studies, and infographics.</p>\n<p>The natural conclusion was to create a Twitter bot. Have you ever seen Stefan Judis' <a href=\"https://twitter.com/randommdn\" rel=\"noopener\">@randomMDN</a>? It tweets a random article from <a href=\"https://developer.mozilla.org/en-US/\" rel=\"noopener\">MDN</a> multiple times a day. I decided to create one of my own to raise awareness about open APIs. Plus it's an excuse for a small fun project.</p>\n"
    },
    {
      "id": "improve-permissions-ux",
      "slug": "improve-permissions-ux",
      "collection": null,
      "keywords": [
        "ux",
        "permissions",
        "pwa",
        "web",
        "javascript",
        "notifications",
        "geolocation",
        "extension",
        "browsers",
        "development"
      ],
      "title": "How to improve your permissions UX",
      "summary": "&quot;Welcome to Costco, can I have your phone number?&quot; Most people would refuse, right? Well I suppose some might oblige, but that depends on a host of factors. This is what permissions requests are like on the web. Let's take a look at how we can do better, before it's too late. Side note: a phone number is like a SnapChat username to your parents.\n",
      "photo": "/images/blog-content/improve-permissions-ux/chris-wilson.png",
      "published_at": "2018-03-03T00:00:00.000Z",
      "renderedSummary": "<p>&quot;Welcome to Costco, can I have your phone number?&quot; Most people would refuse, right? Well I suppose <em>some</em> might oblige, but that depends on a host of factors. This is what permissions requests are like on the web. Let's take a look at how we can do better, before it's too late. Side note: a phone number is like a SnapChat username to your parents.</p>\n"
    }
  ]
}