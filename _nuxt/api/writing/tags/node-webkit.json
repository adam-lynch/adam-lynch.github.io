{
  "id": "node-webkit",
  "name": "node-webkit",
  "articles": [
    {
      "id": "nwjs-app-and-shortcut-apis",
      "slug": "nwjs-app-and-shortcut-apis",
      "collection": null,
      "keywords": [
        "node-webkit",
        "desktop",
        "javascript",
        "app",
        "shortcut"
      ],
      "original": {
        "blogLink": "https://www.packtpub.com/books/content/blogs",
        "blogName": "Packt books",
        "url": "https://www.packtpub.com/books/content/nwjs-app-and-shortcut-apis"
      },
      "title": "NW.js: The App and Shortcut APIs",
      "summary": "The NW.js GUI library provides an &quot;App&quot; API, which contains a variety of methods and properties, some of which are essential to pretty much any app, and some have more obscure use cases. You can access the API as follows...\n",
      "published_at": "2015-12-18T00:00:00.000Z",
      "renderedSummary": "<p>The NW.js GUI library provides an &quot;App&quot; API, which contains a variety of methods and properties, some of which are essential to pretty much any app, and some have more obscure use cases. You can access the API as follows...</p>\n"
    },
    {
      "id": "transparency-and-nwjs",
      "slug": "transparency-and-nwjs",
      "collection": null,
      "keywords": [
        "node-webkit",
        "desktop",
        "javascript",
        "platform",
        "linux",
        "mac",
        "windows"
      ],
      "original": {
        "blogLink": "https://www.packtpub.com/books/content/blogs",
        "blogName": "Packt books",
        "url": "https://www.packtpub.com/books/content/transparency-and-nwjs"
      },
      "title": "Transparency and NW.js",
      "summary": "Yes, NW.js does support transparency, albeit it is disabled by default. One way to enable transparency is to use the transparency property to your application's manifest like this...\n",
      "photo": "/images/blog-content/transparency-and-nwjs/transparent-window-frame.png",
      "published_at": "2016-01-26T00:00:00.000Z",
      "renderedSummary": "<p>Yes, NW.js does support transparency, albeit it is disabled by default. One way to enable transparency is to use the transparency property to your application's manifest like this...</p>\n"
    },
    {
      "id": "under-the-hood-of-a-hybrid-app",
      "slug": "under-the-hood-of-a-hybrid-app",
      "collection": null,
      "keywords": [
        "product",
        "web",
        "javascript",
        "NW.js",
        "node-webkit",
        "desktop",
        "hybrid",
        "mobile"
      ],
      "original": {
        "blogLink": "https://engineroom.teamwork.com",
        "blogName": "Teamwork's Engine Room",
        "url": "https://engineroom.teamwork.com/under-the-hood-of-a-hybrid-app-2215ce6e342a"
      },
      "title": "Under the hood of a hybrid (app)",
      "summary": "It has been about a year since we had A peek under the hood of Teamwork Chat. Since then, we’ve added a few nice features, fixed some bugs, and introduced a couple. You know how it goes. More...\n",
      "photo": "/images/blog-content/under-the-hood-of-a-hybrid-app/nav.png",
      "published_at": "2016-04-16T00:00:00.000Z",
      "renderedSummary": "<p>It has been about a year since we had A peek under the hood of Teamwork Chat. Since then, we’ve added a few nice features, fixed some bugs, and introduced a couple. You know how it goes. More...</p>\n"
    },
    {
      "id": "resurrecting-clippy",
      "slug": "resurrecting-clippy",
      "collection": null,
      "keywords": [
        "clippy",
        "desktop",
        "app",
        "NW.js",
        "node-webkit",
        "javascript"
      ],
      "original": {
        "blogLink": "https://engineroom.teamwork.com",
        "blogName": "Teamwork's Engine Room",
        "url": "https://engineroom.teamwork.com/resurrecting-clippy-89843fcc9871"
      },
      "title": "Resurrecting Clippy",
      "summary": "Remember Clippy? First shipped with Windows 97, Clippy was a “smart” assistant for Microsoft Office. A selfless shape-shifting paperclip who would appear out of nowhere to help you in any way it could. And how did you treat...\n",
      "photo": "/images/blog-content/resurrecting-clippy/osx.png",
      "published_at": "2016-03-08T00:00:00.000Z",
      "renderedSummary": "<p>Remember Clippy? First shipped with Windows 97, Clippy was a “smart” assistant for Microsoft Office. A selfless shape-shifting paperclip who would appear out of nowhere to help you in any way it could. And how did you treat...</p>\n"
    },
    {
      "id": "platform-detection",
      "slug": "platform-detection",
      "collection": null,
      "keywords": [
        "node-webkit",
        "desktop",
        "javascript",
        "platform",
        "linux",
        "mac",
        "windows"
      ],
      "original": {
        "blogLink": "https://www.packtpub.com/books/content/blogs",
        "blogName": "Packt books",
        "url": "https://www.packtpub.com/books/content/transparency-and-nwjs"
      },
      "title": "Platform detection in your NW.js app",
      "summary": "There are various reasons why you might want to detect which platform or operating system your app is currently being ran on. Your keyboard shortcuts or UI may differ per platform, you might want to store files in platform-specific directories on disk, etc. Thanks to node's os module, it isn't too difficult.\n",
      "published_at": "2016-01-26T00:00:00.000Z",
      "renderedSummary": "<p>There are various reasons why you might want to detect which platform or operating system your app is currently being ran on. Your keyboard shortcuts or UI may differ per platform, you might want to store files in platform-specific directories on disk, etc. Thanks to node's <a href=\"https://nodejs.org/api/os.html#os_os_platform\" rel=\"noopener\"><code>os</code></a> module, it isn't too difficult.</p>\n"
    },
    {
      "id": "npm-distribution-path-length-problems",
      "slug": "npm-distribution-path-length-problems",
      "collection": null,
      "keywords": [
        "node-webkit",
        "desktop",
        "javascript",
        "npm",
        "distribution",
        "windows",
        "paths"
      ],
      "original": {
        "blogLink": "https://www.packtpub.com/books/content/blogs",
        "blogName": "Packt books",
        "url": "https://www.packtpub.com/books/content/npm-and-distribution-path-length-problems"
      },
      "title": "npm and distribution path length problems",
      "summary": "NW.js is great for creating desktop applications using Web app technologies. If you're not familiar with NW.js, I'd advise you to read an introductory article like Creating Your First Desktop App With HTML, JS and Node-WebKit to get a good base first. This is a slightly more advanced article intended for anyone interested into distributing their NW.js app to Windows users.\n",
      "photo": "/images/blog-content/npm-distribution-path-length-problems/dance.gif",
      "published_at": "2015-12-07T00:00:00.000Z",
      "renderedSummary": "<p>NW.js is great for creating desktop applications using Web app technologies. If you're not familiar with NW.js, I'd advise you to read an introductory article like Creating Your First Desktop App With HTML, JS and Node-WebKit to get a good base first. This is a slightly more advanced article intended for anyone interested into distributing their NW.js app to Windows users.</p>\n"
    },
    {
      "id": "installing-your-nwjs-app-windows1",
      "slug": "installing-your-nwjs-app-windows1",
      "collection": null,
      "keywords": [
        "node-webkit",
        "desktop",
        "javascript",
        "windows",
        "install",
        "installer"
      ],
      "original": {
        "blogLink": "https://www.packtpub.com/books/content/blogs",
        "blogName": "Packt books",
        "url": "https://www.packtpub.com/books/content/installing-your-nwjs-app-windows"
      },
      "title": "Installing your NW.js app on Windows",
      "summary": "NW.js is great for creating desktop applications using Web app technologies. If you're not familiar with NW.js, I'd advise you to read an introductory article like Creating Your First Desktop App With HTML, JS and Node-WebKit to get a good base first. This is a slightly more advanced article intended for anyone interested into distributing their NW.js app to Windows users.\n",
      "published_at": "2015-12-09T00:00:00.000Z",
      "renderedSummary": "<p>NW.js is great for creating desktop applications using Web app technologies. If you're not familiar with NW.js, I'd advise you to read an introductory article like Creating Your First Desktop App With HTML, JS and Node-WebKit to get a good base first. This is a slightly more advanced article intended for anyone interested into distributing their NW.js app to Windows users.</p>\n"
    },
    {
      "id": "dealing-with-long-paths",
      "slug": "dealing-with-long-paths",
      "collection": null,
      "keywords": [
        "NW.js",
        "node-webkit",
        "npm",
        "distribution",
        "paths",
        "windows"
      ],
      "original": {
        "blogLink": "https://engineroom.teamwork.com",
        "blogName": "Teamwork's Engine Room",
        "url": "https://engineroom.teamwork.com/dealing-with-long-paths-fcf412649a01"
      },
      "title": "Dealing with long paths",
      "summary": "You might have been unfortunate enough to learn that Windows has a 256-character limit on file paths. You could’ve run into this problem locally or on end users’ machines. We’ve created a simple little module called gulp-path-length to…\n",
      "photo": "/images/blog-content/dealing-with-long-paths/helping-hand.gif",
      "published_at": "2015-07-01T00:00:00.000Z",
      "renderedSummary": "<p>You might have been unfortunate enough to learn that Windows has a 256-character limit on file paths. You could’ve run into this problem locally or on end users’ machines. We’ve created a simple little module called gulp-path-length to…</p>\n"
    },
    {
      "id": "building-your-app-creating-executables-nwjs",
      "slug": "building-your-app-creating-executables-nwjs",
      "collection": null,
      "keywords": [
        "node-webkit",
        "desktop",
        "executable",
        "distribution",
        "generation",
        "javascript"
      ],
      "original": {
        "blogLink": "https://www.packtpub.com/books/content/blogs",
        "blogName": "Packt books",
        "url": "https://www.packtpub.com/books/content/building-your-app-creating-executables-nwjs"
      },
      "title": "Building Your App: Creating Executables for NW.js",
      "summary": "NW.js is great for creating desktop applications using Web app technologies. If you're not familiar with NW.js, I'd advise you to read an introductory article like Creating Your First Desktop App With HTML, JS and Node-WebKit to get a good base first. This is a slightly more advanced article intended for anyone interested into distributing their NW.js app to Windows users.\n",
      "published_at": "2015-11-17T00:00:00.000Z",
      "renderedSummary": "<p>NW.js is great for creating desktop applications using Web app technologies. If you're not familiar with NW.js, I'd advise you to read an introductory article like Creating Your First Desktop App With HTML, JS and Node-WebKit to get a good base first. This is a slightly more advanced article intended for anyone interested into distributing their NW.js app to Windows users.</p>\n"
    },
    {
      "id": "beyond-the-browser-from-web-apps-to-desktop-apps",
      "slug": "beyond-the-browser-from-web-apps-to-desktop-apps",
      "collection": null,
      "keywords": [
        "node-webkit",
        "electron",
        "desktop",
        "javascript"
      ],
      "original": {
        "blogLink": "https://www.smashingmagazine.com/",
        "blogName": "Smashing Magazine",
        "url": "https://www.smashingmagazine.com/2017/03/beyond-browser-web-desktop-apps/"
      },
      "title": "Beyond The Browser: From Web Apps To Desktop Apps",
      "summary": "I started out as a web developer, and that’s now one part of what I do as a full-stack developer, but never had I imagined I’d create things for the desktop. I love the web. I love how altruistic our community is, how it embraces open-source, testing and pushing the envelope. I love discovering beautiful websites and powerful apps. When I was first tasked with creating a desktop app, I was apprehensive and intimidated. It seemed like it would be difficult, or at least… different.\n",
      "photo": "/images/blog-content/beyond-the-browser/chromiumDiagram.png",
      "published_at": "2017-03-21T00:00:00.000Z",
      "renderedSummary": "<p>I started out as a web developer, and that’s now one part of what I do as a full-stack developer, but never had I imagined I’d create things for the desktop. I love the web. I love how altruistic our community is, how it embraces open-source, testing and pushing the envelope. I love discovering beautiful websites and powerful apps. When I was first tasked with creating a desktop app, I was apprehensive and intimidated. It seemed like it would be difficult, or at least… different.</p>\n"
    },
    {
      "id": "a-peek-under-the-hood-of-teamwork-chat",
      "slug": "a-peek-under-the-hood-of-teamwork-chat",
      "collection": null,
      "keywords": [
        "teamwork",
        "chat",
        "node.js",
        "javascript",
        "node-webkit",
        "NW.js"
      ],
      "original": {
        "blogLink": "https://engineroom.teamwork.com",
        "blogName": "Teamwork's Engine Room",
        "url": "https://engineroom.teamwork.com/dealing-with-long-paths-fcf412649a01"
      },
      "title": "A peek under the hood of Teamwork Chat",
      "summary": "The idea was to build a chat application of our own. A whole new standalone product to raise the bar for team communication and collaboration. From the beginning, Teamwork Chat was intended to tie our whole suite of…\n",
      "photo": "/images/blog-content/a-peek-under-the-hood-of-teamwork-chat/teamwork-chat.png",
      "published_at": "2015-04-28T00:00:00.000Z",
      "renderedSummary": "<p>The idea was to build a chat application of our own. A whole new standalone product to raise the bar for team communication and collaboration. From the beginning, Teamwork Chat was intended to tie our whole suite of…</p>\n"
    }
  ]
}