{
  "id": "windows",
  "name": "windows",
  "articles": [
    {
      "id": "transparency-and-nwjs",
      "slug": "transparency-and-nwjs",
      "collection": null,
      "keywords": [
        "node-webkit",
        "desktop",
        "javascript",
        "platform",
        "linux",
        "mac",
        "windows",
        "development"
      ],
      "original": {
        "blogLink": "https://www.packtpub.com/books/content/blogs",
        "blogName": "Packt books",
        "url": "https://www.packtpub.com/books/content/transparency-and-nwjs"
      },
      "title": "Transparency and NW.js",
      "summary": "Yes, NW.js does support transparency, albeit it is disabled by default. One way to enable transparency is to use the transparency property to your application's manifest like this...\n",
      "photo": "/images/blog-content/transparency-and-nwjs/transparent-window-frame.png",
      "published_at": "2016-01-26T00:00:00.000Z",
      "renderedSummary": "<p>Yes, NW.js does support transparency, albeit it is disabled by default. One way to enable transparency is to use the transparency property to your application's manifest like this...</p>\n"
    },
    {
      "id": "platform-detection",
      "slug": "platform-detection",
      "collection": null,
      "keywords": [
        "node-webkit",
        "desktop",
        "javascript",
        "platform",
        "linux",
        "mac",
        "windows",
        "development"
      ],
      "original": {
        "blogLink": "https://www.packtpub.com/books/content/blogs",
        "blogName": "Packt books",
        "url": "https://www.packtpub.com/books/content/transparency-and-nwjs"
      },
      "title": "Platform detection in your NW.js app",
      "summary": "There are various reasons why you might want to detect which platform or operating system your app is currently being ran on. Your keyboard shortcuts or UI may differ per platform, you might want to store files in platform-specific directories on disk, etc. Thanks to node's os module, it isn't too difficult.\n",
      "published_at": "2016-01-26T00:00:00.000Z",
      "renderedSummary": "<p>There are various reasons why you might want to detect which platform or operating system your app is currently being ran on. Your keyboard shortcuts or UI may differ per platform, you might want to store files in platform-specific directories on disk, etc. Thanks to node's <a href=\"https://nodejs.org/api/os.html#os_os_platform\" rel=\"noopener\"><code>os</code></a> module, it isn't too difficult.</p>\n"
    },
    {
      "id": "npm-distribution-path-length-problems",
      "slug": "npm-distribution-path-length-problems",
      "collection": null,
      "keywords": [
        "node-webkit",
        "desktop",
        "javascript",
        "npm",
        "distribution",
        "windows",
        "paths",
        "development"
      ],
      "original": {
        "blogLink": "https://www.packtpub.com/books/content/blogs",
        "blogName": "Packt books",
        "url": "https://www.packtpub.com/books/content/npm-and-distribution-path-length-problems"
      },
      "title": "npm and distribution path length problems",
      "summary": "NW.js is great for creating desktop applications using Web app technologies. If you're not familiar with NW.js, I'd advise you to read an introductory article like Creating Your First Desktop App With HTML, JS and Node-WebKit to get a good base first. This is a slightly more advanced article intended for anyone interested into distributing their NW.js app to Windows users.\n",
      "photo": "/images/blog-content/npm-distribution-path-length-problems/dance.gif",
      "published_at": "2015-12-07T00:00:00.000Z",
      "renderedSummary": "<p>NW.js is great for creating desktop applications using Web app technologies. If you're not familiar with NW.js, I'd advise you to read an introductory article like Creating Your First Desktop App With HTML, JS and Node-WebKit to get a good base first. This is a slightly more advanced article intended for anyone interested into distributing their NW.js app to Windows users.</p>\n"
    },
    {
      "id": "installing-your-nwjs-app-windows1",
      "slug": "installing-your-nwjs-app-windows1",
      "collection": null,
      "keywords": [
        "node-webkit",
        "desktop",
        "javascript",
        "windows",
        "install",
        "installer",
        "development"
      ],
      "original": {
        "blogLink": "https://www.packtpub.com/books/content/blogs",
        "blogName": "Packt books",
        "url": "https://www.packtpub.com/books/content/installing-your-nwjs-app-windows"
      },
      "title": "Installing your NW.js app on Windows",
      "summary": "NW.js is great for creating desktop applications using Web app technologies. If you're not familiar with NW.js, I'd advise you to read an introductory article like Creating Your First Desktop App With HTML, JS and Node-WebKit to get a good base first. This is a slightly more advanced article intended for anyone interested into distributing their NW.js app to Windows users.\n",
      "published_at": "2015-12-09T00:00:00.000Z",
      "renderedSummary": "<p>NW.js is great for creating desktop applications using Web app technologies. If you're not familiar with NW.js, I'd advise you to read an introductory article like Creating Your First Desktop App With HTML, JS and Node-WebKit to get a good base first. This is a slightly more advanced article intended for anyone interested into distributing their NW.js app to Windows users.</p>\n"
    },
    {
      "id": "dealing-with-long-paths",
      "slug": "dealing-with-long-paths",
      "collection": null,
      "keywords": [
        "NW.js",
        "node-webkit",
        "npm",
        "distribution",
        "paths",
        "windows",
        "development"
      ],
      "original": {
        "blogLink": "https://engineroom.teamwork.com",
        "blogName": "Teamwork's Engine Room",
        "url": "https://engineroom.teamwork.com/dealing-with-long-paths-fcf412649a01"
      },
      "title": "Dealing with long paths",
      "summary": "You might have been unfortunate enough to learn that Windows has a 256-character limit on file paths. You could’ve run into this problem locally or on end users’ machines. We’ve created a simple little module called gulp-path-length to…\n",
      "photo": "/images/blog-content/dealing-with-long-paths/helping-hand.gif",
      "published_at": "2015-07-01T00:00:00.000Z",
      "renderedSummary": "<p>You might have been unfortunate enough to learn that Windows has a 256-character limit on file paths. You could’ve run into this problem locally or on end users’ machines. We’ve created a simple little module called gulp-path-length to…</p>\n"
    }
  ]
}