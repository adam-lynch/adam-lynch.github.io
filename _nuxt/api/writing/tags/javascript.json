{
  "id": "javascript",
  "name": "javascript",
  "articles": [
    {
      "id": "nwjs-app-and-shortcut-apis",
      "slug": "nwjs-app-and-shortcut-apis",
      "collection": null,
      "keywords": [
        "node-webkit",
        "desktop",
        "javascript",
        "app",
        "shortcut"
      ],
      "original": {
        "blogLink": "https://www.packtpub.com/books/content/blogs",
        "blogName": "Packt books",
        "url": "https://www.packtpub.com/books/content/nwjs-app-and-shortcut-apis"
      },
      "title": "NW.js: The App and Shortcut APIs",
      "summary": "The NW.js GUI library provides an &quot;App&quot; API, which contains a variety of methods and properties, some of which are essential to pretty much any app, and some have more obscure use cases. You can access the API as follows...\n",
      "published_at": "2015-12-18T00:00:00.000Z",
      "renderedSummary": "<p>The NW.js GUI library provides an &quot;App&quot; API, which contains a variety of methods and properties, some of which are essential to pretty much any app, and some have more obscure use cases. You can access the API as follows...</p>\n"
    },
    {
      "id": "under-the-hood-of-a-hybrid-app",
      "slug": "under-the-hood-of-a-hybrid-app",
      "collection": null,
      "keywords": [
        "product",
        "web",
        "javascript",
        "NW.js",
        "node-webkit",
        "desktop",
        "hybrid",
        "mobile"
      ],
      "original": {
        "blogLink": "https://engineroom.teamwork.com",
        "blogName": "Teamwork's Engine Room",
        "url": "https://engineroom.teamwork.com/under-the-hood-of-a-hybrid-app-2215ce6e342a"
      },
      "title": "Under the hood of a hybrid (app)",
      "summary": "It has been about a year since we had A peek under the hood of Teamwork Chat. Since then, we’ve added a few nice features, fixed some bugs, and introduced a couple. You know how it goes. More...\n",
      "photo": "/images/blog-content/under-the-hood-of-a-hybrid-app/nav.png",
      "published_at": "2016-04-16T00:00:00.000Z",
      "renderedSummary": "<p>It has been about a year since we had A peek under the hood of Teamwork Chat. Since then, we’ve added a few nice features, fixed some bugs, and introduced a couple. You know how it goes. More...</p>\n"
    },
    {
      "id": "platform-detection",
      "slug": "platform-detection",
      "collection": null,
      "keywords": [
        "node-webkit",
        "desktop",
        "javascript",
        "platform",
        "linux",
        "mac",
        "windows"
      ],
      "original": {
        "blogLink": "https://www.packtpub.com/books/content/blogs",
        "blogName": "Packt books",
        "url": "https://www.packtpub.com/books/content/transparency-and-nwjs"
      },
      "title": "Platform detection in your NW.js app",
      "summary": "There are various reasons why you might want to detect which platform or operating system your app is currently being ran on. Your keyboard shortcuts or UI may differ per platform, you might want to store files in platform-specific directories on disk, etc. Thanks to node's os module, it isn't too difficult.\n",
      "published_at": "2016-01-26T00:00:00.000Z",
      "renderedSummary": "<p>There are various reasons why you might want to detect which platform or operating system your app is currently being ran on. Your keyboard shortcuts or UI may differ per platform, you might want to store files in platform-specific directories on disk, etc. Thanks to node's <a href=\"https://nodejs.org/api/os.html#os_os_platform\" rel=\"noopener\"><code>os</code></a> module, it isn't too difficult.</p>\n"
    },
    {
      "id": "beyond-the-browser-from-web-apps-to-desktop-apps",
      "slug": "beyond-the-browser-from-web-apps-to-desktop-apps",
      "collection": null,
      "keywords": [
        "node-webkit",
        "electron",
        "desktop",
        "javascript"
      ],
      "original": {
        "blogLink": "https://www.smashingmagazine.com/",
        "blogName": "Smashing Magazine",
        "url": "https://www.smashingmagazine.com/2017/03/beyond-browser-web-desktop-apps/"
      },
      "title": "Beyond The Browser: From Web Apps To Desktop Apps",
      "summary": "I started out as a web developer, and that’s now one part of what I do as a full-stack developer, but never had I imagined I’d create things for the desktop. I love the web. I love how altruistic our community is, how it embraces open-source, testing and pushing the envelope. I love discovering beautiful websites and powerful apps. When I was first tasked with creating a desktop app, I was apprehensive and intimidated. It seemed like it would be difficult, or at least… different.\n",
      "photo": "/images/blog-content/beyond-the-browser/chromiumDiagram.png",
      "published_at": "2017-03-21T00:00:00.000Z",
      "renderedSummary": "<p>I started out as a web developer, and that’s now one part of what I do as a full-stack developer, but never had I imagined I’d create things for the desktop. I love the web. I love how altruistic our community is, how it embraces open-source, testing and pushing the envelope. I love discovering beautiful websites and powerful apps. When I was first tasked with creating a desktop app, I was apprehensive and intimidated. It seemed like it would be difficult, or at least… different.</p>\n"
    },
    {
      "id": "developing-an-electron-edge",
      "slug": "developing-an-electron-edge",
      "collection": null,
      "isBook": true,
      "keywords": [
        "electron",
        "desktop",
        "javascript"
      ],
      "original": {
        "blogLink": "https://bleedingedgepress.com/",
        "blogName": "Bleeding Edge Press",
        "url": "https://bleedingedgepress.com/developing-an-electron-edge/",
        "onlyExternal": true
      },
      "title": "Developing an Electron Edge",
      "summary": "Electron combines Chromium and Node.js, empowering you to create real desktop apps with HTML, CSS, and JavaScript, which integrate tightly into the desktop environment. In Developing an Electron Edge, we cover all things Electron. We breakdown what Electron is and what you can achieve with it over a typical desktop or Web app. Not only will we cover the complete development process from beginning to end, but the packaging and delivery of your app as well. You’ll discover some platform specific issues, learn how to deploy automatic updates, and even take a look at using one codebase for the desktop and the Web.\n",
      "published_at": "2016-05-25T00:00:00.000Z",
      "renderedSummary": "<p>Electron combines Chromium and Node.js, empowering you to create real desktop apps with HTML, CSS, and JavaScript, which integrate tightly into the desktop environment. In Developing an Electron Edge, we cover all things Electron. We breakdown what Electron is and what you can achieve with it over a typical desktop or Web app. Not only will we cover the complete development process from beginning to end, but the packaging and delivery of your app as well. You’ll discover some platform specific issues, learn how to deploy automatic updates, and even take a look at using one codebase for the desktop and the Web.</p>\n"
    },
    {
      "id": "hassle-free-third-party-dependencies",
      "slug": "hassle-free-third-party-dependencies",
      "collection": null,
      "keywords": [
        "dependencies",
        "assets",
        "javascript",
        "css",
        "third-party"
      ],
      "original": {
        "blogLink": "https://engineroom.teamwork.com",
        "blogName": "Teamwork's Engine Room",
        "url": "https://engineroom.teamwork.com/hassle-free-third-party-dependencies-9b6e0a4884ce"
      },
      "title": "Hassle-free third-party dependencies",
      "summary": "How do you manage your third-party assets? With my simple setup, all I have to do is run one command and reload the page. Lets take a look at managing our third-party dependencies with Bower and preprocessing them…\n",
      "photo": "/images/blog-content/hassle-free-third-party-dependencies/bower.png",
      "published_at": "2014-08-29T00:00:00.000Z",
      "renderedSummary": "<p>How do you manage your third-party assets? With my simple setup, all I have to do is run one command and reload the page. Lets take a look at managing our third-party dependencies with Bower and preprocessing them…</p>\n"
    },
    {
      "id": "installing-your-nwjs-app-windows",
      "slug": "installing-your-nwjs-app-windows",
      "collection": null,
      "keywords": [
        "node-webkit",
        "desktop",
        "javascript",
        "windows",
        "install",
        "installer"
      ],
      "original": {
        "blogLink": "https://www.packtpub.com/books/content/blogs",
        "blogName": "Packt books",
        "url": "https://www.packtpub.com/books/content/installing-your-nwjs-app-windows"
      },
      "title": "Installing your NW.js app on Windows",
      "summary": "NW.js is great for creating desktop applications using Web app technologies. If you're not familiar with NW.js, I'd advise you to read an introductory article like Creating Your First Desktop App With HTML, JS and Node-WebKit to get a good base first. This is a slightly more advanced article intended for anyone interested into distributing their NW.js app to Windows users.\n",
      "published_at": "2015-12-09T00:00:00.000Z",
      "renderedSummary": "<p>NW.js is great for creating desktop applications using Web app technologies. If you're not familiar with NW.js, I'd advise you to read an introductory article like Creating Your First Desktop App With HTML, JS and Node-WebKit to get a good base first. This is a slightly more advanced article intended for anyone interested into distributing their NW.js app to Windows users.</p>\n"
    },
    {
      "id": "npm-distribution-path-length-problems",
      "slug": "npm-distribution-path-length-problems",
      "collection": null,
      "keywords": [
        "node-webkit",
        "desktop",
        "javascript",
        "npm",
        "distribution",
        "windows",
        "paths"
      ],
      "original": {
        "blogLink": "https://www.packtpub.com/books/content/blogs",
        "blogName": "Packt books",
        "url": "https://www.packtpub.com/books/content/npm-and-distribution-path-length-problems"
      },
      "title": "npm and distribution path length problems",
      "summary": "NW.js is great for creating desktop applications using Web app technologies. If you're not familiar with NW.js, I'd advise you to read an introductory article like Creating Your First Desktop App With HTML, JS and Node-WebKit to get a good base first. This is a slightly more advanced article intended for anyone interested into distributing their NW.js app to Windows users.\n",
      "photo": "/images/blog-content/npm-distribution-path-length-problems/dance.gif",
      "published_at": "2015-12-07T00:00:00.000Z",
      "renderedSummary": "<p>NW.js is great for creating desktop applications using Web app technologies. If you're not familiar with NW.js, I'd advise you to read an introductory article like Creating Your First Desktop App With HTML, JS and Node-WebKit to get a good base first. This is a slightly more advanced article intended for anyone interested into distributing their NW.js app to Windows users.</p>\n"
    },
    {
      "id": "transparency-and-nwjs",
      "slug": "transparency-and-nwjs",
      "collection": null,
      "keywords": [
        "node-webkit",
        "desktop",
        "javascript",
        "platform",
        "linux",
        "mac",
        "windows"
      ],
      "original": {
        "blogLink": "https://www.packtpub.com/books/content/blogs",
        "blogName": "Packt books",
        "url": "https://www.packtpub.com/books/content/transparency-and-nwjs"
      },
      "title": "Transparency and NW.js",
      "summary": "Yes, NW.js does support transparency, albeit it is disabled by default. One way to enable transparency is to use the transparency property to your application's manifest like this...\n",
      "photo": "/images/blog-content/transparency-and-nwjs/transparent-window-frame.png",
      "published_at": "2016-01-26T00:00:00.000Z",
      "renderedSummary": "<p>Yes, NW.js does support transparency, albeit it is disabled by default. One way to enable transparency is to use the transparency property to your application's manifest like this...</p>\n"
    },
    {
      "id": "building-your-app-creating-executables-nwjs",
      "slug": "building-your-app-creating-executables-nwjs",
      "collection": null,
      "keywords": [
        "node-webkit",
        "desktop",
        "executable",
        "distribution",
        "generation",
        "javascript"
      ],
      "original": {
        "blogLink": "https://www.packtpub.com/books/content/blogs",
        "blogName": "Packt books",
        "url": "https://www.packtpub.com/books/content/building-your-app-creating-executables-nwjs"
      },
      "title": "Building Your App: Creating Executables for NW.js",
      "summary": "NW.js is great for creating desktop applications using Web app technologies. If you're not familiar with NW.js, I'd advise you to read an introductory article like Creating Your First Desktop App With HTML, JS and Node-WebKit to get a good base first. This is a slightly more advanced article intended for anyone interested into distributing their NW.js app to Windows users.\n",
      "published_at": "2015-11-17T00:00:00.000Z",
      "renderedSummary": "<p>NW.js is great for creating desktop applications using Web app technologies. If you're not familiar with NW.js, I'd advise you to read an introductory article like Creating Your First Desktop App With HTML, JS and Node-WebKit to get a good base first. This is a slightly more advanced article intended for anyone interested into distributing their NW.js app to Windows users.</p>\n"
    },
    {
      "id": "olc-ruin-someones-day-with-homoglyphs",
      "slug": "olc-ruin-someones-day-with-homoglyphs",
      "collection": null,
      "keywords": [
        "javascript",
        "node.js",
        "homoglyphs",
        "prank"
      ],
      "original": {
        "blogLink": "https://engineroom.teamwork.com",
        "blogName": "Teamwork's Engine Room",
        "url": "https://engineroom.teamwork.com/olc-ruin-someones-day-with-homoglyphs-b14e9a1a05a4"
      },
      "title": "Olc: Ruin someone’s day with homoglyphs",
      "summary": "You might have seen Ben Johnson’s tweet. I’m sorry everyone, I’ve made a module which makes this a lot easier to do. It’s called Olc. “Olc” is the Irish word for “bad” and is inconspicious enough to go…\n",
      "photo": "/images/blog-content/olc-ruin-someones-day-with-homoglyphs/tweet.png",
      "published_at": "2015-10-27T00:00:00.000Z",
      "renderedSummary": "<p>You might have seen Ben Johnson’s tweet. I’m sorry everyone, I’ve made a module which makes this a lot easier to do. It’s called Olc. “Olc” is the Irish word for “bad” and is inconspicious enough to go…</p>\n"
    },
    {
      "id": "resurrecting-clippy",
      "slug": "resurrecting-clippy",
      "collection": null,
      "keywords": [
        "clippy",
        "desktop",
        "app",
        "NW.js",
        "node-webkit",
        "javascript"
      ],
      "original": {
        "blogLink": "https://engineroom.teamwork.com",
        "blogName": "Teamwork's Engine Room",
        "url": "https://engineroom.teamwork.com/resurrecting-clippy-89843fcc9871"
      },
      "title": "Resurrecting Clippy",
      "summary": "Remember Clippy? First shipped with Windows 97, Clippy was a “smart” assistant for Microsoft Office. A selfless shape-shifting paperclip who would appear out of nowhere to help you in any way it could. And how did you treat...\n",
      "photo": "/images/blog-content/resurrecting-clippy/osx.png",
      "published_at": "2016-03-08T00:00:00.000Z",
      "renderedSummary": "<p>Remember Clippy? First shipped with Windows 97, Clippy was a “smart” assistant for Microsoft Office. A selfless shape-shifting paperclip who would appear out of nowhere to help you in any way it could. And how did you treat...</p>\n"
    },
    {
      "id": "serverless-crash-reporting-for-electron-apps",
      "slug": "serverless-crash-reporting-for-electron-apps",
      "collection": null,
      "keywords": [
        "serverless",
        "electron",
        "javascript",
        "aws"
      ],
      "original": {
        "blogLink": "https://engineroom.teamwork.com",
        "blogName": "Teamwork's Engine Room",
        "url": "https://engineroom.teamwork.com/serverless-crash-reporting-for-electron-apps-fe6e62e5982a"
      },
      "title": "Serverless crash reporting for Electron apps",
      "summary": "The term “serverless” has been trendy for a while now. In this post, I’m going to share my experience dabbling with serverless architecture, specifically for handling crash reports from Electron apps.\n",
      "photo": "https://cdn-images-1.medium.com/max/1600/1*7_8IQl1UmmFdv-Z3EwGNJg.png",
      "published_at": "2016-11-22T00:00:00.000Z",
      "renderedSummary": "<p>The term “serverless” has been trendy for a while now. In this post, I’m going to share my experience dabbling with serverless architecture, specifically for handling crash reports from <a href=\"http://electron.atom.io/\" rel=\"noopener\">Electron</a> apps.</p>\n"
    },
    {
      "id": "static-site-regeneration",
      "slug": "static-site-regeneration",
      "collection": null,
      "keywords": [
        "writing",
        "static-site-generation",
        "headless-cms",
        "jamstack",
        "git",
        "markdown",
        "vue.js",
        "nuxt.js",
        "javascript"
      ],
      "title": "Static site regeneration and focusing on what's important",
      "summary": "I've had my own site for years now but I haven't used it for much. A refresh was needed. I was focusing on the wrong things, trying to do everything, and getting nowhere slowly. It hasn't changed much in appearance, but that's just the tip of the iceberg. It has been completely redone beneath the surface.\n",
      "photo": "/images/blog-content/static-site-regeneration/nuxt.png",
      "published_at": "2018-02-03T00:00:00.000Z",
      "renderedSummary": "<p>I've had my own site for years now but I haven't used it for much. A refresh was needed. I was focusing on the wrong things, trying to do everything, and getting nowhere slowly. It hasn't changed much in appearance, but that's just the tip of the iceberg. It has been completely redone beneath the surface.</p>\n"
    },
    {
      "id": "a-peek-under-the-hood-of-teamwork-chat",
      "slug": "a-peek-under-the-hood-of-teamwork-chat",
      "collection": null,
      "keywords": [
        "teamwork",
        "chat",
        "node.js",
        "javascript",
        "node-webkit",
        "NW.js"
      ],
      "original": {
        "blogLink": "https://engineroom.teamwork.com",
        "blogName": "Teamwork's Engine Room",
        "url": "https://engineroom.teamwork.com/dealing-with-long-paths-fcf412649a01"
      },
      "title": "A peek under the hood of Teamwork Chat",
      "summary": "The idea was to build a chat application of our own. A whole new standalone product to raise the bar for team communication and collaboration. From the beginning, Teamwork Chat was intended to tie our whole suite of…\n",
      "photo": "/images/blog-content/a-peek-under-the-hood-of-teamwork-chat/teamwork-chat.png",
      "published_at": "2015-04-28T00:00:00.000Z",
      "renderedSummary": "<p>The idea was to build a chat application of our own. A whole new standalone product to raise the bar for team communication and collaboration. From the beginning, Teamwork Chat was intended to tie our whole suite of…</p>\n"
    },
    {
      "id": "10-things-to-know-about-gulp",
      "slug": "10-things-to-know-about-gulp",
      "collection": null,
      "keywords": [
        "gulp",
        "build",
        "build system",
        "javascript",
        "node.js"
      ],
      "original": {
        "blogLink": "https://engineroom.teamwork.com",
        "blogName": "Teamwork's Engine Room",
        "url": "https://engineroom.teamwork.com/10-things-to-know-about-gulp-2e99176f9c74"
      },
      "title": "10 things to know about Gulp",
      "summary": "NW.js is great for creating desktop applications using Web app technologies. If you're not familiar with NW.js, I'd advise you to read an introductory article like Creating Your First Desktop App With HTML, JS and Node-WebKit to get a good base first. This is a slightly more advanced article intended for anyone interested into distributing their NW.js app to Windows users.\n",
      "photo": "/images/blog-content/10-things-to-know-about-gulp/gulp.png",
      "published_at": "2015-11-24T00:00:00.000Z",
      "renderedSummary": "<p>NW.js is great for creating desktop applications using Web app technologies. If you're not familiar with NW.js, I'd advise you to read an introductory article like Creating Your First Desktop App With HTML, JS and Node-WebKit to get a good base first. This is a slightly more advanced article intended for anyone interested into distributing their NW.js app to Windows users.</p>\n"
    }
  ]
}