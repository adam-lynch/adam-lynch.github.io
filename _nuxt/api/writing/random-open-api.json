{
  "id": "random-open-api",
  "slug": "random-open-api",
  "highlightedLanguages": [
    "javascript",
    "javascripton",
    "shell"
  ],
  "source": "---\ndate: 2019-02-02\ntags:\n  - api\n  - open API\n  - public API\n  - twitter\n  - bot\n  - zeit\n  - now\n  - serverless\n  - faas\n  - node.js\n  - cron\n  - development\n---\n\n## How I made the @randomOpenAPI Twitter bot in 42 minutes-ish\n\nIn my day job, I'm building a product in which nothing is simple. There's a lot of flexibility, customization, and connected dots. Sometimes I daydream about working on an app which has one page, no settings, customization, or integrations, a single fixed viewport size to worry about, and so on. You know, an empty page.\n\nSeriously, I do love the challenge and I know it will make a lot of people happy. However, I do wonder how quickly I could make something simple from scratch. That's what this project is about.\n\n::: summary\n\nI love APIs. Especially open APIs. I wish there were way more of them. There's a lot of data out there we can't get our hands on. Imagine all of the unborn apps, studies, and infographics.\n\nThe natural conclusion was to create a Twitter bot. Have you ever seen Stefan Judis' [@randomMDN](https://twitter.com/randommdn)? It tweets a random article from [MDN](https://developer.mozilla.org/en-US/) multiple times a day. I decided to create one of my own to raise awareness about open APIs. Plus it's an excuse for a small fun project.\n\n:::\n\nI decided to time myself while I was at it. It took 42 minutes but read on, it wasn't all smooth sailing.\n\n#### Hello, world!\n\nI created a new directory with an `index.js` containing `console.log('Hello, world!)` and ran `node index` in the directory.\n\nOK, I managed not to mess that up. Then, I needed data about open APIs. Did you know people make curated lists of these APIs? Did you know there's... of course there's an API to get the list of APIs. Luckily, the [Public API for Public APIs](https://api.publicapis.org/) has a `/random` endpoint. At a glance it had enough information:\n\n- title (string)\n- description (string)\n- category (string)\n- And some other stuff (more about that later).\n\nLooks good. Now, I need to hit the API. I don't necessarily need to use a library but one library is better than two interfaces. I prefer a HTTP client library which supports both client and server-side usage. Axios is my latest library of choice for this. So I ran `npm init --yes && npm install axios` . Then I added the following code to `index.js`:\n\n```javascript\n  const axios = require('axios');\n  \n  axios.get('https://api.publicapis.org/random')\n  .then((response) => {\n    console.log(response.data);\n  })\n```\n\nNotice how little effort I'm putting into error handling. I'm on the clock.\n\nRunning `node index` resulted in:\n\n```javascripton\n{ count: 1,\n  entries:\n    [ { API: 'Livecoin',\n        Description: 'Cryptocurrency Exchange',\n        Auth: '',\n        HTTPS: true,\n        Cors: 'unknown',\n        Link: 'https://www.livecoin.net/api',\n        Category: 'Cryptocurrency' } ] }\n```\n\n### Writing the tweet\n\nNext, I constructed a tweet from the data. Luckily, none of the text is very long and Twitter doubled their tweet character limit to 280. I fiddled around way too long here. This is what I ended up with:\n\n```javascript\nconst axios = require('axios');\nconst camelCase = require('camelcase');\n\nconst formatHashtag = (text) => {\n  return camelCase(text.replace(/[^a-zA-Z0-9]/g, ''));\n};\n\naxios.get('https://api.publicapis.org/random')\n.then((response) => {\n  if(!response.data.entries.length){\n    throw new Error('No APIs found');\n  }\n\n  // Build tweet content\n  const api = response.data.entries[0];\n  const isDescriptionShort = api.Description.split(' ').length <= 2;\n  let tweet = `📡 Random Open API 📡\\n\\n${api.API}`; // .API is the name of the API\n\n  // If the description is too short, it's shown as a hashtag later instead\n  if(!isDescriptionShort){\n    tweet += `: ${api.Description} `;\n  }\n\n  tweet += `${api.Link} `;\n\n  const tags = ['openApi', 'api', formatHashtag(api.Category)];\n  if(isDescriptionShort){\n    tags.push(formatHashtag(api.Description));\n  }\n\n  tweet += tags.map(tag => `#${tag}`).join(' ');\n  console.log(tweet);\n})\n```\n\nI didn't like how it looked when the description was short (e.g. `Discogs: Music`). In this case, I used it as a hashtag instead.\n\n### Tweet, tweet!\n\nNext is actually sending a tweet. I did a quick google and ended up running `npm install twitter-lite` . I chose [twitter-lite](https://www.npmjs.com/package/twitter-lite) because:\n\n1. The documentation showed me what I needed to do at a glance.\n2. It didn't seem too heavy or outdated.\n3. It had `lite` in the name 🤷‍♂️.\n\nI needed the following Twitter credentials to post a tweet: \n\n- Consumer key.\n- Consumer secret.\n- Access token key.\n- Access token secret.\n\nThis is what took the longest in this project. I created the Twitter account, applied for access to [Twitter's APIs](https://developer.twitter.com/), created an app, and got the credentials I needed. I'm not going into too much detail here, it's tedious.\n\nI commented out the Axios call from before and threw in the following:\n\n```javascript\n// ...\nconst Twitter = require('twitter-lite');\n\nconst client = new Twitter({\n  subdomain: \"api\",\n  consumer_key: \"notTheRealValue\", // from Twitter.\n  consumer_secret: \"notTheRealValueEither\", // from Twitter.\n  access_token_key: \"nopeNotReal\", // from your User (oauth_token)\n  access_token_secret: \"hmmNoStillNotReal\" // from your User (oauth_token_secret)\n});\n\n// ....\n\nclient.post(\"statuses/update\", { status: 'Hello, World!' })\n.then(() => console.log('Success!'))\n```\n\nOnce I ran `node index` again, there was a `Hello, World!` tweet in my feed.\n\nNext, I combined the API and Twitter code, then ran it again;\n\n:::figure random-open-api/tweet.png A screenshot of the first Tweet posted (Daum maps).\n:::\n\nIsn't it beautiful?\n\n### Now, where to host this?\n\nI thought serverless would be a good fit for hosting this. I'd heard the praise Zeit's [Now](https://zeit.co/now) had gotten so I thought I'd give it a go. It's a serverless hosting platform which supports static files, JavaScript, PHP, Python, Go, and more. \n\nThey have integrations with GitHub and more but I went with the slightly more manual approach. I ran `npm install -g now && now login` and added a `now.json` file;\n\n```javascripton\n{\n  \"version\": 2,\n  \"builds\": [{ \"src\": \"*.js\", \"use\": \"@now/node\" }]\n}\n```\n\nThis tells Now that any JavaScript files should be built with their Node.js builder. \n\nI had to tweak my `index.js` slightly. First to add their function boilerplate, and secondly to call `res.end` to output something, rather than logging it to the console;\n\n```javascript\n// ...\n\nmodule.exports = (req, res) => { // Zeit boilerplate\n  axios.get('https://api.publicapis.org/random')\n  .then((response) => {\n    // ...\n    \n    // Tweet, tweet!\n    client.post(\"statuses/update\", { status: tweet })\n    .then(() => res.end('Success!'))\n    .catch((err) => {\n      res.end(`Error: ${err.message}\\n\\n${err.stack}`);\n    });\n  })\n  .catch((error) => {\n    res.end(`Error: ${error.message}\\n\\n${error.stack}`);\n  });\n};\n```\n\nI then ran `now` which is their command for deploying your serverless function. This took a bit longer than I expected to be honest, but to be fair there's probably a lot going behind the scenes to achieve what Zeit provides. \n\nThe result:\n\n```shell\n> Deploying ~/Code/random-open-api under notmyreal@email.com\n> Using project random-open-api\n> https://random-open-api-jdhf89whf3489.now.sh [v2] [in clipboard] [3s]\n┌ index.js        Ready               [24s]\n└── λ index.js (39.83KB) [bru1]\n> Success! Deployment ready [28s]\n```\n\nNow gives you a new URL each time you deploy. I went to this URL in my browser and saw \"Success!\". Yes, it sent the tweet! That was easy.\n\n### Getting secretive\n\nI planned to open source the code and I didn't want to commit my Twitter credentials. First, I needed to create a secret for each so I ran the following commands:\n\n```shell\nnow secret add CONSUMER_KEY \"notTheRealValue\"\nnow secret add CONSUMER_SECRET \"notTheRealValueEither\"\nnow secret add ACCESS_TOKEN_KEY \"nopeNotReal\"\nnow secret add ACCESS_TOKEN_SECRET \"hmmNoStillNotReal\"\n```\n\nThen I added the following `env` object to my `now.json` file. \n\n```javascripton\n{\n  \"version\": 2,\n  \"builds\": [{ \"src\": \"*.js\", \"use\": \"@now/node\" }],\n  \"env\": {\n    \"CONSUMER_KEY\": \"@consumer_key\",\n    \"CONSUMER_SECRET\": \"@consumer_secret\",\n    \"ACCESS_TOKEN_KEY\": \"@access_token_key\",\n    \"ACCESS_TOKEN_SECRET\": \"@access_token_secret\"\n  }\n}\n```\n\nThis then allowed me to use `process.env.CONSUMER_KEY` in my function, for example;\n\n```javascript\nconst client = new Twitter({\n  subdomain: \"api\",\n  consumer_key: process.env.CONSUMER_KEY, // from Twitter.\n  consumer_secret: process.env.CONSUMER_SECRET, // from Twitter.\n  access_token_key: process.env.ACCESS_TOKEN_KEY, // from your User (oauth_token)\n  access_token_secret: process.env.ACCESS_TOKEN_SECRET // from your User (oauth_token_secret)\n});\n```\n\nNow would replace those references with the actual values when deploying. Not too complicated right?\n\nI ran `now` again but this time it didn't work. I got a blank response in my browser. Well, what happened was I somehow managed to type `process.key` , not `process.env` . I went down a rabbit hole trying all sorts of other ways of using environment variables, secrets, `now-env` , and more, before realizing my mistake.\n\n### Automation\n\nI was feeling good. All I had to do was configure Now to run the function on a schedule, publish the code, write and publish the blog post. Profit. \n\nWell, Zeit doesn't support running things on a schedule :(\n\nAt least they don't in Now version 2. I remember there was a bit of talk around the fact they released a backwards incompatible v2. It was forward thinking but had fewer features than v1. I think v1 supported what I needed but I didn't want to start a project by going back in time. \n\nThere were workarounds suggested in GitHub issues like having a `setInterval` in your function. Em, no. I swear, every time I play around with serverless, FaaS, or IoT, an obvious use case isn't covered.\n\nSo I gave up on Now. I decided to manually log into Twitter and tweet a few times a day...\n\nI actually settled for a simple but uncomfortable solution. It turns out there's a completely free (and open source) service, [cron-job.org](https://cron-job.org/en/), which will call your URL on a schedule.\n\n:::figure random-open-api/cron.png The job configuration.\n:::\n\nAll I had to do was sign up, create a job with my URL, and schedule it. As you see, I didn't even have to use the horrible [cron format](http://www.nncron.ru/help/EN/working/cron-format.htm). It was painless.\n\n### Deployment aliases\n\nI realized that if I ever deploy an update, I'll have to log into [cron-job.org](http://cron-job.org) and update the URL. Then I discovered Now's aliases. Individual deployments can be assigned deployments;\n\n:::figure random-open-api/alias.png The create alias modal.\n:::\n\nYou can choose a [now.sh](http://now.sh) subdomain or give your own domain.\n\nSo each time I update the code and deploy, I'll re-assign the alias to the new deployment. There's probably a better way around this but I didn't want to spend too long worrying about it. The code won't need to be updated much and if it ever does, I'd assume the Now dashboard is where it's managed.\n\n### The end\n\nSo that's it. It took me 42 minutes in total, including a couple of blunders. Thank you, bye. \n\nGoodbye!\n\nHey, stop, why are you still reading?\n\nUgh, fine...\n\n### Palm, have you met face?\n\nWhile writing this, I noticed that the API returns more than strictly \"open\" APIs. Some are, while others require some kind of signup and authentication. I guess I was trying to move too fast.\n\nLooking through results, even the ones which require authentication are still free and publicly available. It doesn't bother me then if they're not 100% \"open\", the data is still there to use.\n\nOh wait, no... they're not all free either. The [Semantria API](https://semantria.readme.io/docs) is one entry I just found for example; a \"paid Saas text analytics service\".\n\n![\"Just when I thought I was out, they pull me back in!\" from the Godfather](/images/blog-content/random-open-api/godfather.gif)\n\nLooking at the Public API for Public APIs again, they also return an `auth` property for each API. I've seen results with `\"auth\": \"apiKey\"`, `\"auth\": \"OAuth\"`, and `\"auth\": \"\"`. I need to tweet about the last case.\n\nThe `/random` endpoint doesn't support filtering, so I'd have to keep calling it until I get one that's open. Hmm.\n\nThe `/entries` endpoint does support an `auth` filter parameter but it returns an array of APIs. This looks like my best bet. It doesn't support pagination so it must either return all or at least as many as it can. Here's the new API code:\n\n```javascript\naxios.get('https://api.publicapis.org/entries?auth=null')\n.then((response) => {\n  if(!response.data.entries.length){\n    throw new Error('No APIs found');\n  }\n\n  // Build tweet content from random result\n  const api = response.data.entries[Math.floor(Math.random() * response.data.entries.length)];\n```\n\nThere's no reason why `/random` couldn't also accept filter parameters. After I publish this, I'll go make a pull-request.\n\n### Conclusion\n\nIt was a nice break to rush head first into a small project, hacking something together without reading documentation, properly handling errors, etc. but I don't recommend working like this. It was almost a disaster.\n\nFollow [@randomOpenAPI](twitter.com/randomOpenAPI) on Twitter. Check out the source code at [github.com/adam-lynch/random-open-api](github.com/adam-lynch/random-open-api).\n\nWhat could you make? I could imagine someone finding value in an account that tweets about *two* random APIs. The mashups might be handy for coming up with project ideas.\n",
  "unfilteredRenderedBody": "<h2><a id=\"how-i-made-the-randomopenapi-twitter-bot-in-42-minutes-ish\" class=\"post-header-anchor\" href=\"#how-i-made-the-randomopenapi-twitter-bot-in-42-minutes-ish\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>How I made the @randomOpenAPI Twitter bot in 42 minutes-ish</h2>\n<p>In my day job, I'm building a product in which nothing is simple. There's a lot of flexibility, customization, and connected dots. Sometimes I daydream about working on an app which has one page, no settings, customization, or integrations, a single fixed viewport size to worry about, and so on. You know, an empty page.</p>\n<p>Seriously, I do love the challenge and I know it will make a lot of people happy. However, I do wonder how quickly I could make something simple from scratch. That's what this project is about.</p>\n<article-summary><p>I love APIs. Especially open APIs. I wish there were way more of them. There's a lot of data out there we can't get our hands on. Imagine all of the unborn apps, studies, and infographics.</p>\n<p>The natural conclusion was to create a Twitter bot. Have you ever seen Stefan Judis' <a href=\"https://twitter.com/randommdn\" rel=\"noopener\">@randomMDN</a>? It tweets a random article from <a href=\"https://developer.mozilla.org/en-US/\" rel=\"noopener\">MDN</a> multiple times a day. I decided to create one of my own to raise awareness about open APIs. Plus it's an excuse for a small fun project.</p>\n</article-summary><p>I decided to time myself while I was at it. It took 42 minutes but read on, it wasn't all smooth sailing.</p>\n<h4><a id=\"hello-world\" class=\"post-header-anchor\" href=\"#hello-world\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Hello, world!</h4>\n<p>I created a new directory with an <code>index.js</code> containing <code>console.log('Hello, world!)</code> and ran <code>node index</code> in the directory.</p>\n<p>OK, I managed not to mess that up. Then, I needed data about open APIs. Did you know people make curated lists of these APIs? Did you know there's... of course there's an API to get the list of APIs. Luckily, the <a href=\"https://api.publicapis.org/\" rel=\"noopener\">Public API for Public APIs</a> has a <code>/random</code> endpoint. At a glance it had enough information:</p>\n<ul>\n<li>title (string)</li>\n<li>description (string)</li>\n<li>category (string)</li>\n<li>And some other stuff (more about that later).</li>\n</ul>\n<p>Looks good. Now, I need to hit the API. I don't necessarily need to use a library but one library is better than two interfaces. I prefer a HTTP client library which supports both client and server-side usage. Axios is my latest library of choice for this. So I ran <code>npm init --yes &amp;&amp; npm install axios</code> . Then I added the following code to <code>index.js</code>:</p>\n<pre><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> axios <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'axios'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  axios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.publicapis.org/random'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Notice how little effort I'm putting into error handling. I'm on the clock.</p>\n<p>Running <code>node index</code> resulted in:</p>\n<pre><code class=\"language-javascripton\">{ count: 1,\n  entries:\n    [ { API: 'Livecoin',\n        Description: 'Cryptocurrency Exchange',\n        Auth: '',\n        HTTPS: true,\n        Cors: 'unknown',\n        Link: 'https://www.livecoin.net/api',\n        Category: 'Cryptocurrency' } ] }\n</code></pre>\n<h3><a id=\"writing-the-tweet\" class=\"post-header-anchor\" href=\"#writing-the-tweet\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Writing the tweet</h3>\n<p>Next, I constructed a tweet from the data. Luckily, none of the text is very long and Twitter doubled their tweet character limit to 280. I fiddled around way too long here. This is what I ended up with:</p>\n<pre><code class=\"language-javascript\"><span class=\"token keyword\">const</span> axios <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'axios'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> camelCase <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'camelcase'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">formatHashtag</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">camelCase</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/[^a-zA-Z0-9]/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\naxios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.publicapis.org/random'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>entries<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'No APIs found'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Build tweet content</span>\n  <span class=\"token keyword\">const</span> api <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>entries<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> isDescriptionShort <span class=\"token operator\">=</span> api<span class=\"token punctuation\">.</span>Description<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> tweet <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`📡 Random Open API 📡\\n\\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>api<span class=\"token punctuation\">.</span>API<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// .API is the name of the API</span>\n\n  <span class=\"token comment\">// If the description is too short, it's shown as a hashtag later instead</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isDescriptionShort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    tweet <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token string\">`: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>api<span class=\"token punctuation\">.</span>Description<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> `</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  tweet <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>api<span class=\"token punctuation\">.</span>Link<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> `</span></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> tags <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'openApi'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'api'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">formatHashtag</span><span class=\"token punctuation\">(</span>api<span class=\"token punctuation\">.</span>Category<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isDescriptionShort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    tags<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">formatHashtag</span><span class=\"token punctuation\">(</span>api<span class=\"token punctuation\">.</span>Description<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  tweet <span class=\"token operator\">+=</span> tags<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>tag <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token string\">`#</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>tag<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tweet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>I didn't like how it looked when the description was short (e.g. <code>Discogs: Music</code>). In this case, I used it as a hashtag instead.</p>\n<h3><a id=\"tweet-tweet\" class=\"post-header-anchor\" href=\"#tweet-tweet\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Tweet, tweet!</h3>\n<p>Next is actually sending a tweet. I did a quick google and ended up running <code>npm install twitter-lite</code> . I chose <a href=\"https://www.npmjs.com/package/twitter-lite\" rel=\"noopener\">twitter-lite</a> because:</p>\n<ol>\n<li>The documentation showed me what I needed to do at a glance.</li>\n<li>It didn't seem too heavy or outdated.</li>\n<li>It had <code>lite</code> in the name 🤷‍♂️.</li>\n</ol>\n<p>I needed the following Twitter credentials to post a tweet:</p>\n<ul>\n<li>Consumer key.</li>\n<li>Consumer secret.</li>\n<li>Access token key.</li>\n<li>Access token secret.</li>\n</ul>\n<p>This is what took the longest in this project. I created the Twitter account, applied for access to <a href=\"https://developer.twitter.com/\" rel=\"noopener\">Twitter's APIs</a>, created an app, and got the credentials I needed. I'm not going into too much detail here, it's tedious.</p>\n<p>I commented out the Axios call from before and threw in the following:</p>\n<pre><code class=\"language-javascript\"><span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">const</span> Twitter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'twitter-lite'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Twitter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  subdomain<span class=\"token punctuation\">:</span> <span class=\"token string\">\"api\"</span><span class=\"token punctuation\">,</span>\n  consumer_key<span class=\"token punctuation\">:</span> <span class=\"token string\">\"notTheRealValue\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// from Twitter.</span>\n  consumer_secret<span class=\"token punctuation\">:</span> <span class=\"token string\">\"notTheRealValueEither\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// from Twitter.</span>\n  access_token_key<span class=\"token punctuation\">:</span> <span class=\"token string\">\"nopeNotReal\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// from your User (oauth_token)</span>\n  access_token_secret<span class=\"token punctuation\">:</span> <span class=\"token string\">\"hmmNoStillNotReal\"</span> <span class=\"token comment\">// from your User (oauth_token_secret)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ....</span>\n\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"statuses/update\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> status<span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello, World!'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Success!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Once I ran <code>node index</code> again, there was a <code>Hello, World!</code> tweet in my feed.</p>\n<p>Next, I combined the API and Twitter code, then ran it again;</p>\n<figure>\n          <a href=\"/images/blog-content/random-open-api/tweet.png\"><img src=\"/images/blog-content/random-open-api/tweet.png\" alt=\"\"/></a>\n          <figcaption><p>A screenshot of the first Tweet posted (Daum maps).</p>\n</figcaption>\n        </figure><p>Isn't it beautiful?</p>\n<h3><a id=\"now-where-to-host-this\" class=\"post-header-anchor\" href=\"#now-where-to-host-this\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Now, where to host this?</h3>\n<p>I thought serverless would be a good fit for hosting this. I'd heard the praise Zeit's <a href=\"https://zeit.co/now\" rel=\"noopener\">Now</a> had gotten so I thought I'd give it a go. It's a serverless hosting platform which supports static files, JavaScript, PHP, Python, Go, and more.</p>\n<p>They have integrations with GitHub and more but I went with the slightly more manual approach. I ran <code>npm install -g now &amp;&amp; now login</code> and added a <code>now.json</code> file;</p>\n<pre><code class=\"language-javascripton\">{\n  \"version\": 2,\n  \"builds\": [{ \"src\": \"*.js\", \"use\": \"@now/node\" }]\n}\n</code></pre>\n<p>This tells Now that any JavaScript files should be built with their Node.js builder.</p>\n<p>I had to tweak my <code>index.js</code> slightly. First to add their function boilerplate, and secondly to call <code>res.end</code> to output something, rather than logging it to the console;</p>\n<pre><code class=\"language-javascript\"><span class=\"token comment\">// ...</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Zeit boilerplate</span>\n  axios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.publicapis.org/random'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    \n    <span class=\"token comment\">// Tweet, tweet!</span>\n    client<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"statuses/update\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> status<span class=\"token punctuation\">:</span> tweet <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Success!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Error: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>err<span class=\"token punctuation\">.</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n\\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>err<span class=\"token punctuation\">.</span>stack<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Error: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>error<span class=\"token punctuation\">.</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n\\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>error<span class=\"token punctuation\">.</span>stack<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>I then ran <code>now</code> which is their command for deploying your serverless function. This took a bit longer than I expected to be honest, but to be fair there's probably a lot going behind the scenes to achieve what Zeit provides.</p>\n<p>The result:</p>\n<pre><code class=\"language-shell\">> Deploying ~/Code/random-open-api under notmyreal@email.com\n> Using project random-open-api\n> https://random-open-api-jdhf89whf3489.now.sh [v2] [in clipboard] [3s]\n┌ index.js        Ready               [24s]\n└── λ index.js (39.83KB) [bru1]\n> Success! Deployment ready [28s]\n</code></pre>\n<p>Now gives you a new URL each time you deploy. I went to this URL in my browser and saw &quot;Success!&quot;. Yes, it sent the tweet! That was easy.</p>\n<h3><a id=\"getting-secretive\" class=\"post-header-anchor\" href=\"#getting-secretive\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Getting secretive</h3>\n<p>I planned to open source the code and I didn't want to commit my Twitter credentials. First, I needed to create a secret for each so I ran the following commands:</p>\n<pre><code class=\"language-shell\">now secret add CONSUMER_KEY \"notTheRealValue\"\nnow secret add CONSUMER_SECRET \"notTheRealValueEither\"\nnow secret add ACCESS_TOKEN_KEY \"nopeNotReal\"\nnow secret add ACCESS_TOKEN_SECRET \"hmmNoStillNotReal\"\n</code></pre>\n<p>Then I added the following <code>env</code> object to my <code>now.json</code> file.</p>\n<pre><code class=\"language-javascripton\">{\n  \"version\": 2,\n  \"builds\": [{ \"src\": \"*.js\", \"use\": \"@now/node\" }],\n  \"env\": {\n    \"CONSUMER_KEY\": \"@consumer_key\",\n    \"CONSUMER_SECRET\": \"@consumer_secret\",\n    \"ACCESS_TOKEN_KEY\": \"@access_token_key\",\n    \"ACCESS_TOKEN_SECRET\": \"@access_token_secret\"\n  }\n}\n</code></pre>\n<p>This then allowed me to use <code>process.env.CONSUMER_KEY</code> in my function, for example;</p>\n<pre><code class=\"language-javascript\"><span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Twitter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  subdomain<span class=\"token punctuation\">:</span> <span class=\"token string\">\"api\"</span><span class=\"token punctuation\">,</span>\n  consumer_key<span class=\"token punctuation\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>CONSUMER_KEY<span class=\"token punctuation\">,</span> <span class=\"token comment\">// from Twitter.</span>\n  consumer_secret<span class=\"token punctuation\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>CONSUMER_SECRET<span class=\"token punctuation\">,</span> <span class=\"token comment\">// from Twitter.</span>\n  access_token_key<span class=\"token punctuation\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>ACCESS_TOKEN_KEY<span class=\"token punctuation\">,</span> <span class=\"token comment\">// from your User (oauth_token)</span>\n  access_token_secret<span class=\"token punctuation\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>ACCESS_TOKEN_SECRET <span class=\"token comment\">// from your User (oauth_token_secret)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Now would replace those references with the actual values when deploying. Not too complicated right?</p>\n<p>I ran <code>now</code> again but this time it didn't work. I got a blank response in my browser. Well, what happened was I somehow managed to type <code>process.key</code> , not <code>process.env</code> . I went down a rabbit hole trying all sorts of other ways of using environment variables, secrets, <code>now-env</code> , and more, before realizing my mistake.</p>\n<h3><a id=\"automation\" class=\"post-header-anchor\" href=\"#automation\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Automation</h3>\n<p>I was feeling good. All I had to do was configure Now to run the function on a schedule, publish the code, write and publish the blog post. Profit.</p>\n<p>Well, Zeit doesn't support running things on a schedule 😦</p>\n<p>At least they don't in Now version 2. I remember there was a bit of talk around the fact they released a backwards incompatible v2. It was forward thinking but had fewer features than v1. I think v1 supported what I needed but I didn't want to start a project by going back in time.</p>\n<p>There were workarounds suggested in GitHub issues like having a <code>setInterval</code> in your function. Em, no. I swear, every time I play around with serverless, FaaS, or IoT, an obvious use case isn't covered.</p>\n<p>So I gave up on Now. I decided to manually log into Twitter and tweet a few times a day...</p>\n<p>I actually settled for a simple but uncomfortable solution. It turns out there's a completely free (and open source) service, <a href=\"https://cron-job.org/en/\" rel=\"noopener\">cron-job.org</a>, which will call your URL on a schedule.</p>\n<figure>\n          <a href=\"/images/blog-content/random-open-api/cron.png\"><img src=\"/images/blog-content/random-open-api/cron.png\" alt=\"\"/></a>\n          <figcaption><p>The job configuration.</p>\n</figcaption>\n        </figure><p>All I had to do was sign up, create a job with my URL, and schedule it. As you see, I didn't even have to use the horrible <a href=\"http://www.nncron.ru/help/EN/working/cron-format.htm\" rel=\"noopener\">cron format</a>. It was painless.</p>\n<h3><a id=\"deployment-aliases\" class=\"post-header-anchor\" href=\"#deployment-aliases\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Deployment aliases</h3>\n<p>I realized that if I ever deploy an update, I'll have to log into <a href=\"http://cron-job.org\" rel=\"noopener\">cron-job.org</a> and update the URL. Then I discovered Now's aliases. Individual deployments can be assigned deployments;</p>\n<figure>\n          <a href=\"/images/blog-content/random-open-api/alias.png\"><img src=\"/images/blog-content/random-open-api/alias.png\" alt=\"\"/></a>\n          <figcaption><p>The create alias modal.</p>\n</figcaption>\n        </figure><p>You can choose a <a href=\"http://now.sh\" rel=\"noopener\">now.sh</a> subdomain or give your own domain.</p>\n<p>So each time I update the code and deploy, I'll re-assign the alias to the new deployment. There's probably a better way around this but I didn't want to spend too long worrying about it. The code won't need to be updated much and if it ever does, I'd assume the Now dashboard is where it's managed.</p>\n<h3><a id=\"the-end\" class=\"post-header-anchor\" href=\"#the-end\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>The end</h3>\n<p>So that's it. It took me 42 minutes in total, including a couple of blunders. Thank you, bye.</p>\n<p>Goodbye!</p>\n<p>Hey, stop, why are you still reading?</p>\n<p>Ugh, fine...</p>\n<h3><a id=\"palm-have-you-met-face\" class=\"post-header-anchor\" href=\"#palm-have-you-met-face\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Palm, have you met face?</h3>\n<p>While writing this, I noticed that the API returns more than strictly &quot;open&quot; APIs. Some are, while others require some kind of signup and authentication. I guess I was trying to move too fast.</p>\n<p>Looking through results, even the ones which require authentication are still free and publicly available. It doesn't bother me then if they're not 100% &quot;open&quot;, the data is still there to use.</p>\n<p>Oh wait, no... they're not all free either. The <a href=\"https://semantria.readme.io/docs\" rel=\"noopener\">Semantria API</a> is one entry I just found for example; a &quot;paid Saas text analytics service&quot;.</p>\n<p><img src=\"/images/blog-content/random-open-api/godfather.gif\" alt=\"&quot;Just when I thought I was out, they pull me back in!&quot; from the Godfather\"></p>\n<p>Looking at the Public API for Public APIs again, they also return an <code>auth</code> property for each API. I've seen results with <code>&quot;auth&quot;: &quot;apiKey&quot;</code>, <code>&quot;auth&quot;: &quot;OAuth&quot;</code>, and <code>&quot;auth&quot;: &quot;&quot;</code>. I need to tweet about the last case.</p>\n<p>The <code>/random</code> endpoint doesn't support filtering, so I'd have to keep calling it until I get one that's open. Hmm.</p>\n<p>The <code>/entries</code> endpoint does support an <code>auth</code> filter parameter but it returns an array of APIs. This looks like my best bet. It doesn't support pagination so it must either return all or at least as many as it can. Here's the new API code:</p>\n<pre><code class=\"language-javascript\">axios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.publicapis.org/entries?auth=null'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>entries<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'No APIs found'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Build tweet content from random result</span>\n  <span class=\"token keyword\">const</span> api <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>entries<span class=\"token punctuation\">[</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>entries<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>There's no reason why <code>/random</code> couldn't also accept filter parameters. After I publish this, I'll go make a pull-request.</p>\n<h3><a id=\"conclusion\" class=\"post-header-anchor\" href=\"#conclusion\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Conclusion</h3>\n<p>It was a nice break to rush head first into a small project, hacking something together without reading documentation, properly handling errors, etc. but I don't recommend working like this. It was almost a disaster.</p>\n<p>Follow <a href=\"twitter.com/randomOpenAPI\">@randomOpenAPI</a> on Twitter. Check out the source code at <a href=\"github.com/adam-lynch/random-open-api\">github.com/adam-lynch/random-open-api</a>.</p>\n<p>What could you make? I could imagine someone finding value in an account that tweets about <em>two</em> random APIs. The mashups might be handy for coming up with project ideas.</p>\n",
  "attributes": {
    "date": "2019-02-02T00:00:00.000Z",
    "tags": [
      {
        "id": "api",
        "name": "api"
      },
      {
        "id": "open-api",
        "name": "open API"
      },
      {
        "id": "public-api",
        "name": "public API"
      },
      {
        "id": "twitter",
        "name": "twitter"
      },
      {
        "id": "bot",
        "name": "bot"
      },
      {
        "id": "zeit",
        "name": "zeit"
      },
      {
        "id": "now",
        "name": "now"
      },
      {
        "id": "serverless",
        "name": "serverless"
      },
      {
        "id": "faas",
        "name": "faas"
      },
      {
        "id": "nodejs",
        "name": "node.js"
      },
      {
        "id": "cron",
        "name": "cron"
      },
      {
        "id": "development",
        "name": "development"
      }
    ],
    "title": "How I made the @randomOpenAPI Twitter bot in 42 minutes-ish",
    "updated_at": "2019-05-22T08:26:12.392Z",
    "photo": "/images/blog-content/random-open-api/tweet.png"
  },
  "title": "How I made the @randomOpenAPI Twitter bot in 42 minutes-ish",
  "renderedSummary": "<p>I love APIs. Especially open APIs. I wish there were way more of them. There's a lot of data out there we can't get our hands on. Imagine all of the unborn apps, studies, and infographics.</p>\n<p>The natural conclusion was to create a Twitter bot. Have you ever seen Stefan Judis' <a href=\"https://twitter.com/randommdn\" rel=\"noopener\">@randomMDN</a>? It tweets a random article from <a href=\"https://developer.mozilla.org/en-US/\" rel=\"noopener\">MDN</a> multiple times a day. I decided to create one of my own to raise awareness about open APIs. Plus it's an excuse for a small fun project.</p>\n",
  "rendered": "<h2><a id=\"how-i-made-the-randomopenapi-twitter-bot-in-42-minutes-ish\" class=\"post-header-anchor\" href=\"#how-i-made-the-randomopenapi-twitter-bot-in-42-minutes-ish\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>How I made the @randomOpenAPI Twitter bot in 42 minutes-ish</h2>\n<p>In my day job, I'm building a product in which nothing is simple. There's a lot of flexibility, customization, and connected dots. Sometimes I daydream about working on an app which has one page, no settings, customization, or integrations, a single fixed viewport size to worry about, and so on. You know, an empty page.</p>\n<p>Seriously, I do love the challenge and I know it will make a lot of people happy. However, I do wonder how quickly I could make something simple from scratch. That's what this project is about.</p>\n<p>I love APIs. Especially open APIs. I wish there were way more of them. There's a lot of data out there we can't get our hands on. Imagine all of the unborn apps, studies, and infographics.</p>\n<p>The natural conclusion was to create a Twitter bot. Have you ever seen Stefan Judis' <a href=\"https://twitter.com/randommdn\" rel=\"noopener\">@randomMDN</a>? It tweets a random article from <a href=\"https://developer.mozilla.org/en-US/\" rel=\"noopener\">MDN</a> multiple times a day. I decided to create one of my own to raise awareness about open APIs. Plus it's an excuse for a small fun project.</p>\n<p>I decided to time myself while I was at it. It took 42 minutes but read on, it wasn't all smooth sailing.</p>\n<h4><a id=\"hello-world\" class=\"post-header-anchor\" href=\"#hello-world\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Hello, world!</h4>\n<p>I created a new directory with an <code>index.js</code> containing <code>console.log('Hello, world!)</code> and ran <code>node index</code> in the directory.</p>\n<p>OK, I managed not to mess that up. Then, I needed data about open APIs. Did you know people make curated lists of these APIs? Did you know there's... of course there's an API to get the list of APIs. Luckily, the <a href=\"https://api.publicapis.org/\" rel=\"noopener\">Public API for Public APIs</a> has a <code>/random</code> endpoint. At a glance it had enough information:</p>\n<ul>\n<li>title (string)</li>\n<li>description (string)</li>\n<li>category (string)</li>\n<li>And some other stuff (more about that later).</li>\n</ul>\n<p>Looks good. Now, I need to hit the API. I don't necessarily need to use a library but one library is better than two interfaces. I prefer a HTTP client library which supports both client and server-side usage. Axios is my latest library of choice for this. So I ran <code>npm init --yes &amp;&amp; npm install axios</code> . Then I added the following code to <code>index.js</code>:</p>\n<pre><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> axios <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'axios'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  axios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.publicapis.org/random'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Notice how little effort I'm putting into error handling. I'm on the clock.</p>\n<p>Running <code>node index</code> resulted in:</p>\n<pre><code class=\"language-javascripton\">{ count: 1,\n  entries:\n    [ { API: 'Livecoin',\n        Description: 'Cryptocurrency Exchange',\n        Auth: '',\n        HTTPS: true,\n        Cors: 'unknown',\n        Link: 'https://www.livecoin.net/api',\n        Category: 'Cryptocurrency' } ] }\n</code></pre>\n<h3><a id=\"writing-the-tweet\" class=\"post-header-anchor\" href=\"#writing-the-tweet\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Writing the tweet</h3>\n<p>Next, I constructed a tweet from the data. Luckily, none of the text is very long and Twitter doubled their tweet character limit to 280. I fiddled around way too long here. This is what I ended up with:</p>\n<pre><code class=\"language-javascript\"><span class=\"token keyword\">const</span> axios <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'axios'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> camelCase <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'camelcase'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">formatHashtag</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">camelCase</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/[^a-zA-Z0-9]/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\naxios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.publicapis.org/random'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>entries<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'No APIs found'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Build tweet content</span>\n  <span class=\"token keyword\">const</span> api <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>entries<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> isDescriptionShort <span class=\"token operator\">=</span> api<span class=\"token punctuation\">.</span>Description<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> tweet <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`📡 Random Open API 📡\\n\\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>api<span class=\"token punctuation\">.</span>API<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// .API is the name of the API</span>\n\n  <span class=\"token comment\">// If the description is too short, it's shown as a hashtag later instead</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isDescriptionShort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    tweet <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token string\">`: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>api<span class=\"token punctuation\">.</span>Description<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> `</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  tweet <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>api<span class=\"token punctuation\">.</span>Link<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> `</span></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> tags <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'openApi'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'api'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">formatHashtag</span><span class=\"token punctuation\">(</span>api<span class=\"token punctuation\">.</span>Category<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isDescriptionShort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    tags<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">formatHashtag</span><span class=\"token punctuation\">(</span>api<span class=\"token punctuation\">.</span>Description<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  tweet <span class=\"token operator\">+=</span> tags<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>tag <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token string\">`#</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>tag<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tweet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>I didn't like how it looked when the description was short (e.g. <code>Discogs: Music</code>). In this case, I used it as a hashtag instead.</p>\n<h3><a id=\"tweet-tweet\" class=\"post-header-anchor\" href=\"#tweet-tweet\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Tweet, tweet!</h3>\n<p>Next is actually sending a tweet. I did a quick google and ended up running <code>npm install twitter-lite</code> . I chose <a href=\"https://www.npmjs.com/package/twitter-lite\" rel=\"noopener\">twitter-lite</a> because:</p>\n<ol>\n<li>The documentation showed me what I needed to do at a glance.</li>\n<li>It didn't seem too heavy or outdated.</li>\n<li>It had <code>lite</code> in the name 🤷‍♂️.</li>\n</ol>\n<p>I needed the following Twitter credentials to post a tweet:</p>\n<ul>\n<li>Consumer key.</li>\n<li>Consumer secret.</li>\n<li>Access token key.</li>\n<li>Access token secret.</li>\n</ul>\n<p>This is what took the longest in this project. I created the Twitter account, applied for access to <a href=\"https://developer.twitter.com/\" rel=\"noopener\">Twitter's APIs</a>, created an app, and got the credentials I needed. I'm not going into too much detail here, it's tedious.</p>\n<p>I commented out the Axios call from before and threw in the following:</p>\n<pre><code class=\"language-javascript\"><span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">const</span> Twitter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'twitter-lite'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Twitter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  subdomain<span class=\"token punctuation\">:</span> <span class=\"token string\">\"api\"</span><span class=\"token punctuation\">,</span>\n  consumer_key<span class=\"token punctuation\">:</span> <span class=\"token string\">\"notTheRealValue\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// from Twitter.</span>\n  consumer_secret<span class=\"token punctuation\">:</span> <span class=\"token string\">\"notTheRealValueEither\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// from Twitter.</span>\n  access_token_key<span class=\"token punctuation\">:</span> <span class=\"token string\">\"nopeNotReal\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// from your User (oauth_token)</span>\n  access_token_secret<span class=\"token punctuation\">:</span> <span class=\"token string\">\"hmmNoStillNotReal\"</span> <span class=\"token comment\">// from your User (oauth_token_secret)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ....</span>\n\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"statuses/update\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> status<span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello, World!'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Success!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Once I ran <code>node index</code> again, there was a <code>Hello, World!</code> tweet in my feed.</p>\n<p>Next, I combined the API and Twitter code, then ran it again;</p>\n<figure>\n          <a href=\"/images/blog-content/random-open-api/tweet.png\"><img src=\"/images/blog-content/random-open-api/tweet.png\" alt=\"\"/></a>\n          <figcaption><p>A screenshot of the first Tweet posted (Daum maps).</p>\n</figcaption>\n        </figure><p>Isn't it beautiful?</p>\n<h3><a id=\"now-where-to-host-this\" class=\"post-header-anchor\" href=\"#now-where-to-host-this\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Now, where to host this?</h3>\n<p>I thought serverless would be a good fit for hosting this. I'd heard the praise Zeit's <a href=\"https://zeit.co/now\" rel=\"noopener\">Now</a> had gotten so I thought I'd give it a go. It's a serverless hosting platform which supports static files, JavaScript, PHP, Python, Go, and more.</p>\n<p>They have integrations with GitHub and more but I went with the slightly more manual approach. I ran <code>npm install -g now &amp;&amp; now login</code> and added a <code>now.json</code> file;</p>\n<pre><code class=\"language-javascripton\">{\n  \"version\": 2,\n  \"builds\": [{ \"src\": \"*.js\", \"use\": \"@now/node\" }]\n}\n</code></pre>\n<p>This tells Now that any JavaScript files should be built with their Node.js builder.</p>\n<p>I had to tweak my <code>index.js</code> slightly. First to add their function boilerplate, and secondly to call <code>res.end</code> to output something, rather than logging it to the console;</p>\n<pre><code class=\"language-javascript\"><span class=\"token comment\">// ...</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Zeit boilerplate</span>\n  axios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.publicapis.org/random'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    \n    <span class=\"token comment\">// Tweet, tweet!</span>\n    client<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"statuses/update\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> status<span class=\"token punctuation\">:</span> tweet <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Success!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Error: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>err<span class=\"token punctuation\">.</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n\\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>err<span class=\"token punctuation\">.</span>stack<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Error: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>error<span class=\"token punctuation\">.</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n\\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>error<span class=\"token punctuation\">.</span>stack<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>I then ran <code>now</code> which is their command for deploying your serverless function. This took a bit longer than I expected to be honest, but to be fair there's probably a lot going behind the scenes to achieve what Zeit provides.</p>\n<p>The result:</p>\n<pre><code class=\"language-shell\">> Deploying ~/Code/random-open-api under notmyreal@email.com\n> Using project random-open-api\n> https://random-open-api-jdhf89whf3489.now.sh [v2] [in clipboard] [3s]\n┌ index.js        Ready               [24s]\n└── λ index.js (39.83KB) [bru1]\n> Success! Deployment ready [28s]\n</code></pre>\n<p>Now gives you a new URL each time you deploy. I went to this URL in my browser and saw &quot;Success!&quot;. Yes, it sent the tweet! That was easy.</p>\n<h3><a id=\"getting-secretive\" class=\"post-header-anchor\" href=\"#getting-secretive\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Getting secretive</h3>\n<p>I planned to open source the code and I didn't want to commit my Twitter credentials. First, I needed to create a secret for each so I ran the following commands:</p>\n<pre><code class=\"language-shell\">now secret add CONSUMER_KEY \"notTheRealValue\"\nnow secret add CONSUMER_SECRET \"notTheRealValueEither\"\nnow secret add ACCESS_TOKEN_KEY \"nopeNotReal\"\nnow secret add ACCESS_TOKEN_SECRET \"hmmNoStillNotReal\"\n</code></pre>\n<p>Then I added the following <code>env</code> object to my <code>now.json</code> file.</p>\n<pre><code class=\"language-javascripton\">{\n  \"version\": 2,\n  \"builds\": [{ \"src\": \"*.js\", \"use\": \"@now/node\" }],\n  \"env\": {\n    \"CONSUMER_KEY\": \"@consumer_key\",\n    \"CONSUMER_SECRET\": \"@consumer_secret\",\n    \"ACCESS_TOKEN_KEY\": \"@access_token_key\",\n    \"ACCESS_TOKEN_SECRET\": \"@access_token_secret\"\n  }\n}\n</code></pre>\n<p>This then allowed me to use <code>process.env.CONSUMER_KEY</code> in my function, for example;</p>\n<pre><code class=\"language-javascript\"><span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Twitter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  subdomain<span class=\"token punctuation\">:</span> <span class=\"token string\">\"api\"</span><span class=\"token punctuation\">,</span>\n  consumer_key<span class=\"token punctuation\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>CONSUMER_KEY<span class=\"token punctuation\">,</span> <span class=\"token comment\">// from Twitter.</span>\n  consumer_secret<span class=\"token punctuation\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>CONSUMER_SECRET<span class=\"token punctuation\">,</span> <span class=\"token comment\">// from Twitter.</span>\n  access_token_key<span class=\"token punctuation\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>ACCESS_TOKEN_KEY<span class=\"token punctuation\">,</span> <span class=\"token comment\">// from your User (oauth_token)</span>\n  access_token_secret<span class=\"token punctuation\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>ACCESS_TOKEN_SECRET <span class=\"token comment\">// from your User (oauth_token_secret)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Now would replace those references with the actual values when deploying. Not too complicated right?</p>\n<p>I ran <code>now</code> again but this time it didn't work. I got a blank response in my browser. Well, what happened was I somehow managed to type <code>process.key</code> , not <code>process.env</code> . I went down a rabbit hole trying all sorts of other ways of using environment variables, secrets, <code>now-env</code> , and more, before realizing my mistake.</p>\n<h3><a id=\"automation\" class=\"post-header-anchor\" href=\"#automation\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Automation</h3>\n<p>I was feeling good. All I had to do was configure Now to run the function on a schedule, publish the code, write and publish the blog post. Profit.</p>\n<p>Well, Zeit doesn't support running things on a schedule 😦</p>\n<p>At least they don't in Now version 2. I remember there was a bit of talk around the fact they released a backwards incompatible v2. It was forward thinking but had fewer features than v1. I think v1 supported what I needed but I didn't want to start a project by going back in time.</p>\n<p>There were workarounds suggested in GitHub issues like having a <code>setInterval</code> in your function. Em, no. I swear, every time I play around with serverless, FaaS, or IoT, an obvious use case isn't covered.</p>\n<p>So I gave up on Now. I decided to manually log into Twitter and tweet a few times a day...</p>\n<p>I actually settled for a simple but uncomfortable solution. It turns out there's a completely free (and open source) service, <a href=\"https://cron-job.org/en/\" rel=\"noopener\">cron-job.org</a>, which will call your URL on a schedule.</p>\n<figure>\n          <a href=\"/images/blog-content/random-open-api/cron.png\"><img src=\"/images/blog-content/random-open-api/cron.png\" alt=\"\"/></a>\n          <figcaption><p>The job configuration.</p>\n</figcaption>\n        </figure><p>All I had to do was sign up, create a job with my URL, and schedule it. As you see, I didn't even have to use the horrible <a href=\"http://www.nncron.ru/help/EN/working/cron-format.htm\" rel=\"noopener\">cron format</a>. It was painless.</p>\n<h3><a id=\"deployment-aliases\" class=\"post-header-anchor\" href=\"#deployment-aliases\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Deployment aliases</h3>\n<p>I realized that if I ever deploy an update, I'll have to log into <a href=\"http://cron-job.org\" rel=\"noopener\">cron-job.org</a> and update the URL. Then I discovered Now's aliases. Individual deployments can be assigned deployments;</p>\n<figure>\n          <a href=\"/images/blog-content/random-open-api/alias.png\"><img src=\"/images/blog-content/random-open-api/alias.png\" alt=\"\"/></a>\n          <figcaption><p>The create alias modal.</p>\n</figcaption>\n        </figure><p>You can choose a <a href=\"http://now.sh\" rel=\"noopener\">now.sh</a> subdomain or give your own domain.</p>\n<p>So each time I update the code and deploy, I'll re-assign the alias to the new deployment. There's probably a better way around this but I didn't want to spend too long worrying about it. The code won't need to be updated much and if it ever does, I'd assume the Now dashboard is where it's managed.</p>\n<h3><a id=\"the-end\" class=\"post-header-anchor\" href=\"#the-end\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>The end</h3>\n<p>So that's it. It took me 42 minutes in total, including a couple of blunders. Thank you, bye.</p>\n<p>Goodbye!</p>\n<p>Hey, stop, why are you still reading?</p>\n<p>Ugh, fine...</p>\n<h3><a id=\"palm-have-you-met-face\" class=\"post-header-anchor\" href=\"#palm-have-you-met-face\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Palm, have you met face?</h3>\n<p>While writing this, I noticed that the API returns more than strictly &quot;open&quot; APIs. Some are, while others require some kind of signup and authentication. I guess I was trying to move too fast.</p>\n<p>Looking through results, even the ones which require authentication are still free and publicly available. It doesn't bother me then if they're not 100% &quot;open&quot;, the data is still there to use.</p>\n<p>Oh wait, no... they're not all free either. The <a href=\"https://semantria.readme.io/docs\" rel=\"noopener\">Semantria API</a> is one entry I just found for example; a &quot;paid Saas text analytics service&quot;.</p>\n<p><img src=\"/images/blog-content/random-open-api/godfather.gif\" alt=\"&quot;Just when I thought I was out, they pull me back in!&quot; from the Godfather\"></p>\n<p>Looking at the Public API for Public APIs again, they also return an <code>auth</code> property for each API. I've seen results with <code>&quot;auth&quot;: &quot;apiKey&quot;</code>, <code>&quot;auth&quot;: &quot;OAuth&quot;</code>, and <code>&quot;auth&quot;: &quot;&quot;</code>. I need to tweet about the last case.</p>\n<p>The <code>/random</code> endpoint doesn't support filtering, so I'd have to keep calling it until I get one that's open. Hmm.</p>\n<p>The <code>/entries</code> endpoint does support an <code>auth</code> filter parameter but it returns an array of APIs. This looks like my best bet. It doesn't support pagination so it must either return all or at least as many as it can. Here's the new API code:</p>\n<pre><code class=\"language-javascript\">axios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.publicapis.org/entries?auth=null'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>entries<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'No APIs found'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Build tweet content from random result</span>\n  <span class=\"token keyword\">const</span> api <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>entries<span class=\"token punctuation\">[</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>entries<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>There's no reason why <code>/random</code> couldn't also accept filter parameters. After I publish this, I'll go make a pull-request.</p>\n<h3><a id=\"conclusion\" class=\"post-header-anchor\" href=\"#conclusion\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 8 8\"><path d=\"M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z\"></path></svg></a>Conclusion</h3>\n<p>It was a nice break to rush head first into a small project, hacking something together without reading documentation, properly handling errors, etc. but I don't recommend working like this. It was almost a disaster.</p>\n<p>Follow <a href=\"twitter.com/randomOpenAPI\">@randomOpenAPI</a> on Twitter. Check out the source code at <a href=\"github.com/adam-lynch/random-open-api\">github.com/adam-lynch/random-open-api</a>.</p>\n<p>What could you make? I could imagine someone finding value in an account that tweets about <em>two</em> random APIs. The mashups might be handy for coming up with project ideas.</p>\n",
  "summary": "I love APIs. Especially open APIs. I wish there were way more of them. There's a lot of data out there we can't get our hands on. Imagine all of the unborn apps, studies, and infographics.\nThe natural conclusion was to create a Twitter bot. Have you ever seen Stefan Judis' @randomMDN? It tweets a random article from MDN multiple times a day. I decided to create one of my own to raise awareness about open APIs. Plus it's an excuse for a small fun project.\n",
  "photo": "/images/blog-content/random-open-api/tweet.png",
  "keywords": [
    "api",
    "open API",
    "public API",
    "twitter",
    "bot",
    "zeit",
    "now",
    "serverless",
    "faas",
    "node.js",
    "cron",
    "development"
  ],
  "published_at": "2019-02-02T00:00:00.000Z",
  "updated_at": "2019-05-22T08:26:12.392Z",
  "year": 2019,
  "month": 2,
  "day": 3,
  "relevanceScore": 0.875,
  "next": {
    "id": "production-databases-tips",
    "slug": "production-databases-tips",
    "collection": null,
    "keywords": [
      "database",
      "database-adminstration",
      "dba",
      "production",
      "productivity",
      "development",
      "mysql",
      "mssql",
      "postgres",
      "rockstar",
      "satire"
    ],
    "title": "10 pro tips: how to work with production databases",
    "summary": "The goal here is get what you need done as quickly as possible and keep rolling. &quot;Move fast and break things. Unless you are breaking stuff, you are not moving fast enough.&quot; - Mark Zuckerberg. 1. Connect to your production databases using the same tool you use for development. There's no need to...\n",
    "published_at": "2018-08-05T00:00:00.000Z",
    "renderedSummary": "<p>The goal here is get what you need done as quickly as possible and keep rolling. &quot;Move fast and break things. Unless you are breaking stuff, you are not moving fast enough.&quot; - Mark Zuckerberg. 1. Connect to your production databases using the same tool you use for development. There's no need to...</p>\n"
  },
  "prev": {
    "id": "resurrecting-clippy",
    "slug": "resurrecting-clippy",
    "collection": null,
    "keywords": [
      "clippy",
      "desktop",
      "app",
      "NW.js",
      "node-webkit",
      "javascript",
      "development"
    ],
    "original": {
      "blogLink": "https://engineroom.teamwork.com",
      "blogName": "Teamwork's Engine Room",
      "url": "https://engineroom.teamwork.com/resurrecting-clippy-89843fcc9871"
    },
    "title": "Resurrecting Clippy",
    "summary": "Remember Clippy? First shipped with Windows 97, Clippy was a “smart” assistant for Microsoft Office. A selfless shape-shifting paperclip who would appear out of nowhere to help you in any way it could. And how did you treat...\n",
    "photo": "/images/blog-content/resurrecting-clippy/osx.png",
    "published_at": "2016-03-08T00:00:00.000Z",
    "renderedSummary": "<p>Remember Clippy? First shipped with Windows 97, Clippy was a “smart” assistant for Microsoft Office. A selfless shape-shifting paperclip who would appear out of nowhere to help you in any way it could. And how did you treat...</p>\n"
  },
  "moreArticles": [
    {
      "id": "flexible-data-tables-with-css-grid",
      "slug": "flexible-data-tables-with-css-grid",
      "collection": null,
      "keywords": [
        "css grid",
        "css",
        "javascript",
        "table",
        "data",
        "responsive design",
        "responsive",
        "flexbox",
        "resize column",
        "web app",
        "development",
        "crm",
        "sales"
      ],
      "title": "Flexible data tables with CSS Grid",
      "summary": "Now that we've launched, I can finally talk about the secret project I've been working on for the last two years. One interesting piece of the Teamwork CRM puzzle was the &quot;list view&quot;.\nIt's a powerful page component which exists seven times in the app — a table on steroids essentially. I could talk about it for days but I won't bore you. I'll focus on how we added a lot of flexibility with a few lines of CSS (Grid). Namely, how we lay out data-heavy tables, how we support resizing of columns, and more.\n",
      "photo": "/images/blog-content/flexible-data-tables-with-css-grid/wide3.png",
      "published_at": "2019-05-12T00:00:00.000Z",
      "renderedSummary": "<p>Now that we've launched, I can finally talk about the secret project I've been working on for the last two years. One interesting piece of the <a href=\"https://www.teamwork.com/crm\" rel=\"noopener\">Teamwork CRM</a> puzzle was the &quot;list view&quot;.</p>\n<p>It's a powerful page component which exists seven times in the app — a table on steroids essentially. I could talk about it for days but I won't bore you. I'll focus on how we added a lot of flexibility with a few lines of CSS (Grid). Namely, how we lay out data-heavy tables, how we support resizing of columns, and more.</p>\n"
    },
    {
      "id": "lessons-learned-leading-teams",
      "slug": "lessons-learned-leading-teams",
      "collection": null,
      "keywords": [
        "leadership",
        "management",
        "teams",
        "development",
        "lead",
        "leading",
        "managing",
        "manager",
        "programming",
        "delegating",
        "efficiency",
        "communication",
        "people",
        "technical",
        "transition",
        "job",
        "career",
        "growth",
        "product management",
        "project management",
        "product lead",
        "technical lead",
        "lead developer"
      ],
      "title": "Lessons learned leading teams",
      "summary": "I've been thinking about team leading a lot lately. When revisiting advice a friend asked for when transitioning to a team lead position, I decided to flesh it out and put it online. Most of the following will hopefully be helpful to anyone leading a team or any manager, although some will be more relevant to leaders of developers and developers transitioning into leadership roles. If it helps anyone, great. It will be a good reference for me at least. Alright, let's get to it.\n",
      "photo": "/images/blog-content/lessons-learned-leading-teams/graph.png",
      "published_at": "2018-11-14T00:00:00.000Z",
      "renderedSummary": "<p>I've been thinking about team leading a lot lately. When revisiting advice a friend asked for when transitioning to a team lead position, I decided to flesh it out and put it online. Most of the following will hopefully be helpful to anyone leading a team or any manager, although some will be more relevant to leaders of developers and developers transitioning into leadership roles. If it helps anyone, great. It will be a good reference for me at least. Alright, let's get to it.</p>\n"
    },
    {
      "id": "serverless-crash-reporting-for-electron-apps",
      "slug": "serverless-crash-reporting-for-electron-apps",
      "collection": null,
      "keywords": [
        "serverless",
        "electron",
        "javascript",
        "aws",
        "development"
      ],
      "original": {
        "blogLink": "https://engineroom.teamwork.com",
        "blogName": "Teamwork's Engine Room",
        "url": "https://engineroom.teamwork.com/serverless-crash-reporting-for-electron-apps-fe6e62e5982a"
      },
      "title": "Serverless crash reporting for Electron apps",
      "summary": "The term “serverless” has been trendy for a while now. In this post, I’m going to share my experience dabbling with serverless architecture, specifically for handling crash reports from Electron apps.\n",
      "photo": "https://cdn-images-1.medium.com/max/1600/1*7_8IQl1UmmFdv-Z3EwGNJg.png",
      "published_at": "2016-11-22T00:00:00.000Z",
      "renderedSummary": "<p>The term “serverless” has been trendy for a while now. In this post, I’m going to share my experience dabbling with serverless architecture, specifically for handling crash reports from <a href=\"http://electron.atom.io/\" rel=\"noopener\">Electron</a> apps.</p>\n"
    }
  ]
}